1. When a file is modified ->
2. Get file Content ->
3. Compose (Compose):
    Inputs: base64ToString(outputs('Get_file_content')?['body']['$content'])
4. Delimiter (Compose):
    Inputs: ,
5. FileContent (Compose):
    Inputs: replace(outputs('Compose'),'"','')
6. LineEnding (Compose):
    Inputs: if(equals(indexof(outputs('FileContent'), decodeUriComponent('%0D%0A')), -1), if(equals(indexof(outputs('FileContent'), decodeUriComponent('%0A')), -1), decodeUriComponent('%0D'), decodeUriComponent('%0A')), decodeUriComponent('%0D%0A'))
7. Headers:
    Inputs: split(first(split(outputs('FileContent'),outputs('LineEnding'))),outputs('Delimiter'))
8. Apply to each (apply to each):
    Inputs: skip(split(outputs('FileContent'),outputs('LineEnding')),1)
8.a. EachObject (filter):
    From: range(0,length(outputs('Headers')))
    Map:
    Key: outputs('Headers')?[item()], Value: split(items('Apply_to_each'),outputs('Delimiter'))?[item()]
8.b. replace (Compose):
    Input: replace(replace(replace(replace(string(body('EachObject')), '{', ''), '}', ''), '[', '{'), ']', '}')
8.c. json (Compose):
    Input: json(outputs('replace'))

{
    "ID": "31",
    " DateTime": "Fri Dec 04 2020 22:28:00",
    " Shift": "Z",
    " Downtime Minutes": "111",
    " Downtime Reason": "Short Stop",
    " Comments": "Test"
}