- p_layout:
    Control: GroupContainer
    Variant: verticalAutoLayoutContainer
    Properties:
      Height: =Parent.Height
      LayoutAlignItems: =LayoutAlignItems.Stretch
      LayoutDirection: =LayoutDirection.Vertical
      LayoutGap: =
      LayoutMode: =LayoutMode.Auto
      Width: =Parent.Width
      X: =
    Children:
    - p_header:
        Control: GroupContainer
        Variant: horizontalAutoLayoutContainer
        Properties:
          AlignInContainer: =AlignInContainer.SetByContainer
          DropShadow: =DropShadow.None
          Fill: =varColor1
          LayoutAlignItems: =LayoutAlignItems.Stretch
          LayoutGap: =varPadding
          LayoutMinHeight: =10
          LayoutMinWidth: =10
          LayoutMode: =LayoutMode.Auto
          PaddingBottom: =varPadding
          PaddingLeft: =varPadding
          PaddingRight: =varPadding
          PaddingTop: =varPadding
          RadiusBottomLeft: =0
          RadiusBottomRight: =0
          RadiusTopLeft: =0
          RadiusTopRight: =0
        Children:
        - p_collect:
            Control: Classic/Button
            Properties:
              OnSelect: |-
                =/*Start*/
                Set(varLoading,{Visible: true, Value: 10, Text: "Loading"});

                UpdateContext({
                    locStartDate: p_start_date.SelectedDate
                });

                Set(varStartDate, locStartDate);
                Set(varEndDate, locStartDate);

                /*Collect Production*/
                If(
                    DateDiff( varStartDate, varEndDate, TimeUnit.Days) <= 10,
                    Set(varLoading,{Visible: true, Value: 33, Text: "Collecting Production Data"});
                    ClearCollect(collectProduction,
                        ForAll(
                            Filter(Production,
                                Hour_Ending <= DateAdd(varEndDate, 23, TimeUnit.Hours),
                                Hour_Starting >= DateAdd(varStartDate, -1, TimeUnit.Hours)
                            ),
                            {
                                id: Value(ThisRecord.ID),
                                shift: Text(ThisRecord.Shift_Letter),
                                line: Text(ThisRecord.Line.Value),
                                lot: Text(ThisRecord.Lot),
                                catalog: Text(ThisRecord.Catalog),
                                size: Text(ThisRecord.Size),
                                hour_ending: DateTimeValue(ThisRecord.Hour_Ending),
                                hour_starting: DateTimeValue(ThisRecord.Hour_Starting),
                                goal: Value(ThisRecord.Hourly_Goal),
                                amount_built: Value(ThisRecord.Amount_Built),
                                unit_starting: Value(ThisRecord.Unit_Starting),
                                unit_ending: Value(ThisRecord.Unit_Ending),
                                reject_labels: Value(ThisRecord.Reject_Labels),
                                reject_cartridges: Value(ThisRecord.Reject_Cartridges),
                                reject_units: Value(ThisRecord.Reject_Units),
                                qa_units: Value(ThisRecord.QA_Units)
                            }
                        )
                    ),

                    DateDiff( varStartDate, varEndDate, TimeUnit.Days) > 20,
                    Set(varLoading,{Visible: true, Value: 75, Text: "Parsing PowerAutomate Flow for Production Data"});
                    ClearCollect(collectProduction,
                        ForAll(
                            Table(
                                ParseJSON(
                                    flow_get_units_range_v2.Run(
                                        Text("All"),
                                        Text(DateAdd(varEndDate, 23,TimeUnit.Hours), "yyyy-mm-dd"),
                                        Text(DateAdd(varStartDate, -1, TimeUnit.Hours), "yyyy-mm-dd")
                                    ).output
                                )
                            ),
                            {
                                id: Value(Value._ID),
                                shift: Text(Value._shift),
                                line: Text(Value._line),
                                lot: Text(Value._lot),
                                catalog: Text(Value._catalog),
                                size: Text(Value._size),
                                hour_ending: DateTimeValue(Value._hour_ending),
                                hour_starting: DateTimeValue(Value._hour_starting),
                                goal: Value(Value._goal),
                                amount_built: Value(Value._amount_built),
                                unit_starting: Value(Value._unit_starting),
                                unit_ending: Value(Value._unit_ending),
                                reject_labels: Value(Value._reject_labels),
                                reject_cartridges: Value(Value._reject_cartridges),
                                reject_units: Value(Value._reject_units),
                                qa_units: Value(Value._qa)
                            }
                        )
                    ),

                    DateDiff( varStartDate, varEndDate, TimeUnit.Days) <= 20,
                    Set(varLoading,{Visible: true, Value: 20, Text: "Collecting Production Dataset 1"});
                    Collect(material_1,
                        Sort(
                            Filter(Production,
                                And(
                                    Hour_Starting >= DateAdd(varStartDate, -1, TimeUnit.Hours),
                                    Hour_Ending <= DateAdd(varEndDate, 23, TimeUnit.Hours)
                                )
                            ),
                            Hour_Ending,
                            SortOrder.Ascending
                        )
                    );

                    Set(varLoading,{Visible: true, Value: 30, Text: "Collecting Production Dataset 2"});
                    Collect(material_2,
                        Sort(
                            Filter(Production,
                                And(
                                    Hour_Starting >= DateAdd(varStartDate, -1, TimeUnit.Hours),
                                    Hour_Ending <= DateAdd(varEndDate, 23, TimeUnit.Hours)
                                )
                            ),
                            Hour_Ending,
                            SortOrder.Descending
                        )
                    );

                    
                    Set(varLoading,{Visible: true, Value: 40, Text: "Joining Production Dataset 1"});
                    ClearCollect(fusion, material_1);

                    Set(varLoading,{Visible: true, Value: 50, Text: "Joining Production Dataset 2"});
                    Collect(fusion,
                        Filter(material_2, Not(ID in material_1.ID))
                    );

                    Set(varLoading,{Visible: true, Value: 60, Text: "Collecting Joined Production Data"});
                    ClearCollect(
                        collectProduction,
                        ForAll(
                            fusion,
                            {
                                id: Value(ThisRecord.ID),
                                shift: Text(ThisRecord.Shift_Letter),
                                line: Text(ThisRecord.Line.Value),
                                lot: Text(ThisRecord.Lot),
                                catalog: Text(ThisRecord.Catalog),
                                size: Text(ThisRecord.Size),
                                hour_ending: DateTimeValue(ThisRecord.Hour_Ending),
                                hour_starting: DateTimeValue(ThisRecord.Hour_Starting),
                                goal: Value(ThisRecord.Hourly_Goal),
                                amount_built: Value(ThisRecord.Amount_Built),
                                unit_starting: Value(ThisRecord.Unit_Starting),
                                unit_ending: Value(ThisRecord.Unit_Ending),
                                reject_labels: Value(ThisRecord.Reject_Labels),
                                reject_cartridges: Value(ThisRecord.Reject_Cartridges),
                                reject_units: Value(ThisRecord.Reject_Units),
                                qa_units: Value(ThisRecord.QA_Units)
                            }
                        )
                    );

                    Set(varLoading,{Visible: true, Value: 75, Text: "Garbage Collection"});
                    Clear(fusion);
                    Clear(material_1);
                    Clear(material_2);
                );

                /*Collect Downtime*/
                If(
                    DateDiff( varStartDate, varEndDate, TimeUnit.Days) <= 10,
                    Set(varLoading,{Visible: true, Value: 66, Text: "Collecting Downtime Data"});
                    ClearCollect(collectDowntime,
                        ForAll(
                            Filter(Downtime,
                                Ended <= DateAdd(varEndDate, 23, TimeUnit.Hours),
                                Started >= DateAdd(varStartDate, -1, TimeUnit.Hours)
                            ),
                            {
                                id: Value(ThisRecord.ID),
                                shift: Text(ThisRecord.Shift_Letter),
                                line: Text(ThisRecord.Line.Value),
                                lot: Text(ThisRecord.Lot),
                                catalog: Text(ThisRecord.Catalog),
                                size: Text(ThisRecord.Size),
                                started: DateTimeValue(ThisRecord.Started),
                                ended: DateTimeValue(ThisRecord.Ended),
                                reason: Text(ThisRecord.Reason.Value),
                                total: Value(ThisRecord.Total_Downtime),
                                comments: Text(ThisRecord.Comments)
                            }
                        )
                    ),

                    DateDiff( varStartDate, varEndDate, TimeUnit.Days) > 20,
                    Set(varLoading,{Visible: true, Value: 75, Text: "Parsing PowerAutomate Flow for Downtime Data"});
                    ClearCollect(collectDowntime,
                        ForAll(
                            Table(
                                ParseJSON(
                                    flow_get_downtime_range_v2.Run(
                                        Text("All"),
                                        Text(DateAdd(varEndDate, 23,TimeUnit.Hours), "yyyy-mm-dd"),
                                        Text(DateAdd(varStartDate, -1, TimeUnit.Hours), "yyyy-mm-dd")
                                    ).output
                                )
                            ),
                            {
                                id: Value(Value._ID),
                                shift: Text(Value._shift),
                                line: Text(Value._line),
                                lot: Text(Value._lot),
                                catalog: Text(Value._catalog),
                                size: Text(Value._size),
                                started: DateTimeValue(Value._started),
                                ended: DateTimeValue(Value._ended),
                                reason: Text(Value._reason),
                                total: Value(Value._total),
                                comments: Text(Value._comments)
                            }
                        )
                    ),

                    DateDiff( varStartDate, varEndDate, TimeUnit.Days) <= 20,
                    Set(varLoading,{Visible: true, Value: 20, Text: "Collecting Downtime Dataset 1"});
                    Collect(material_1,
                        Sort(
                            Filter(Downtime,
                                And(
                                    Started >= DateAdd(varStartDate, -1, TimeUnit.Hours),
                                    Ended <= DateAdd(varEndDate, 23, TimeUnit.Hours)
                                )
                            ),
                            Ended,
                            SortOrder.Ascending
                        )
                    );

                    Set(varLoading,{Visible: true, Value: 30, Text: "Collecting Downtime Dataset 2"});
                    Collect(material_2,
                        Sort(
                            Filter(Downtime,
                                And(
                                    Started >= DateAdd(varStartDate, -1, TimeUnit.Hours),
                                    Ended <= DateAdd(varEndDate, 23, TimeUnit.Hours)
                                )
                            ),
                            Ended,
                            SortOrder.Descending
                        )
                    );

                    Set(varLoading,{Visible: true, Value: 40, Text: "Joining Downtime Dataset 1"});
                    ClearCollect(fusion, material_1);

                    Set(varLoading,{Visible: true, Value: 50, Text: "Joining Downtime Dataset 2"});
                    Collect(fusion,
                        Filter(material_2, Not(ID in material_1.ID))
                    );

                    Set(varLoading,{Visible: true, Value: 60, Text: "Collecting Joined Downtime Data"});
                    ClearCollect(
                        collectDowntime,
                        ForAll(
                            fusion,
                            {
                                id: Value(ThisRecord.ID),
                                shift: Text(ThisRecord.Shift_Letter),
                                line: Text(ThisRecord.Line.Value),
                                lot: Text(ThisRecord.Lot),
                                catalog: Text(ThisRecord.Catalog),
                                size: Text(ThisRecord.Size),
                                started: DateTimeValue(ThisRecord.Started),
                                ended: DateTimeValue(ThisRecord.Ended),
                                reason: Text(ThisRecord.Reason.Value),
                                total: Value(ThisRecord.Total_Downtime),
                                comments: Text(ThisRecord.Comments)
                            }
                        )
                    );

                    Set(varLoading,{Visible: true, Value: 75, Text: "Garbage Collection"});
                    Clear(fusion);
                    Clear(material_1);
                    Clear(material_2);
                );

                Set(varLoading,{Visible: true, Value: 100, Text: "Finshing up"});

                /*Update*/
                Select(p_update);
              Text: ="collect"
              Visible: =false
              X: =20
              Y: =20
        - p_update:
            Control: Classic/Button
            Properties:
              OnSelect: |-
               =/*Update Code*/
                Set(varLoading,{Visible: true, Value: 10, Text: "Updating"});

                /*Default Filters*/
                Set(varLoading,{Visible: true, Value: 45, Text: "Creating Default Filters"});
                UpdateContext({
                    /*Production*/
                    locDefaultProductionFilter:
                        Filter(
                            collectProduction,
                            hour_starting >= DateAdd(locStartDate, -1, TimeUnit.Hours),
                            hour_ending <= DateAdd(locStartDate, 23, TimeUnit.Hours),
                            If(
                                p_shift.Selected.Value = "All",
                                shift = shift,
                                shift = p_shift.Selected.Value
                            )
                        ),

                    /*Downtime*/
                    locDefaultDowntimeFilter:
                        Filter(
                            collectDowntime,
                            started >= DateAdd(locStartDate, -1, TimeUnit.Hours),
                            ended <= DateAdd(locStartDate, 23, TimeUnit.Hours),
                            If(
                                p_shift.Selected.Value = "All",
                                shift = shift,
                                shift = p_shift.Selected.Value
                            )
                        )

                });

                Set(varLoading,{Visible: true, Value: 75, Text: "Updating Performance Data"});
                /*Create a collection by itterating through the line schema*/
                Clear(collectPerformance);
                ForAll(
                    collectLineSchema,
                    
                    /*Collect data for Graphs*/
                    Collect(
                        collectPerformance,
                        {
                            /*Enter each line*/
                            line: SCH_Line,

                            amount_built:
                                IfError(
                                    Round(
                                        Sum(
                                            Filter(locDefaultProductionFilter, line = SCH_Line),
                                            amount_built
                                        ),
                                        0
                                    ),
                                    0
                                ),

                            goal_sum:
                                IfError(
                                    Round(            
                                        Sum(
                                            Filter(locDefaultProductionFilter, line = SCH_Line),
                                            goal
                                        ),
                                        0
                                    ),
                                    0
                                ),

                            goal:
                                IfError(
                                    Round(
                                        Sum(
                                            Filter(locDefaultProductionFilter, line = SCH_Line),
                                            amount_built
                                        ) /
                                        Sum(
                                            Filter(locDefaultProductionFilter, line = SCH_Line),
                                            goal
                                        ) * 100,
                                        0
                                    ),
                                    0
                                ),
                            
                            downtime_sum:
                                IfError(
                                    Round(
                                        Sum(
                                            Filter(
                                                locDefaultDowntimeFilter,
                                                line = SCH_Line
                                            ),
                                            total
                                        ),
                                        0
                                    ),
                                    0
                                ),

                            downtime:
                                IfError(
                                    Round(
                                        Sum(
                                            Filter(
                                                locDefaultDowntimeFilter,
                                                line = SCH_Line
                                            ),
                                            total
                                        ) /
                                        If(p_shift.Selected.Value = "All", 1440 , 480) *
                                        100,
                                        0
                                    ),
                                    0
                                ),

                            yield_sum:
                                IfError(
                                    Round(
                                        Sum(
                                            Filter(locDefaultProductionFilter, line = SCH_Line),
                                            amount_built + reject_units + reject_cartridges
                                        ),
                                        0
                                    ),
                                    0
                                ),

                            yield_total:
                                IfError(
                                    Round(
                                        Sum(
                                            Filter(locDefaultProductionFilter, line = SCH_Line),
                                            amount_built
                                        ),
                                        0
                                    ),
                                    0
                                ),
                            
                            yield:
                                IfError(
                                    Round(
                                        Sum(
                                            Filter(locDefaultProductionFilter, line = SCH_Line),
                                            amount_built
                                        ) /
                                        Sum(
                                            Filter(locDefaultProductionFilter, line = SCH_Line),
                                            amount_built + reject_units + reject_cartridges
                                        ) * 100,
                                        0
                                    ),
                                    0
                                ),
                            
                            performance:
                                /*goal*/
                                (IfError(
                                    Sum(
                                        Filter(locDefaultProductionFilter, line = SCH_Line),
                                        amount_built
                                    ) /
                                    Sum(
                                        Filter(locDefaultProductionFilter, line = SCH_Line),
                                        goal
                                    ),
                                    0
                                )) *
                                /*downtime*/
                                (IfError(
                                    1-(Sum(
                                        Filter(
                                            locDefaultDowntimeFilter,
                                            line = SCH_Line
                                        ),
                                        total
                                    ) /
                                    If(p_shift.Selected.Value = "All", 1440 , 480)),
                                    0
                                )) *
                                /*yield*/
                                (IfError(
                                    Sum(
                                        Filter(locDefaultProductionFilter, line = SCH_Line),
                                        amount_built
                                    ) /
                                    Sum(
                                        Filter(locDefaultProductionFilter, line = SCH_Line),
                                        amount_built + reject_units + reject_cartridges
                                    ),
                                    0
                                )) * 100
                        }
                    )
                );

                /*Clear for garbage collection*/
                Set(varLoading,{Visible: true, Value: 95, Text: "Finishing up"});
                UpdateContext({
                    locDefaultProductionFilter: Blank(),
                    locDefaultDowntimeFilter: Blank()
                });

                /*End Loading*/
                Set(varLoading,{Visible: true, Value: 100, Text: "Completed"});
                Set(varLoading,{Visible: false, Value: -1, Text: "Not Loading"});
              Text: ="update"
              Visible: =false
              X: =20
              Y: =20
        - p_logo:
            Control: Image
            Properties:
              Image: =LOGO_MSIG_SBlue_FIT_ALPHA
              FillPortions: =1
              LayoutMinHeight: =1
              LayoutMinWidth: =1
              Width: =10
        - p_h_title:
            Control: Label
            Properties:
              Text: ="Encapsualtion Daily Managmenet System"
              Align: =Align.Center
              Color: =varColor5
              FillPortions: =6
              LayoutMinHeight: =1
              LayoutMinWidth: =1
              Size: =Self.Height / 2
        - p_h_nav:
            Control: GroupContainer
            Variant: horizontalAutoLayoutContainer
            Properties:
              AlignInContainer: =AlignInContainer.SetByContainer
              DropShadow: =DropShadow.None
              LayoutAlignItems: =LayoutAlignItems.Stretch
              LayoutGap: =varPadding
              LayoutJustifyContent: =LayoutJustifyContent.Center
              LayoutMinHeight: =1
              LayoutMinWidth: =10
              LayoutMode: =LayoutMode.Auto
              RadiusBottomLeft: =0
              RadiusBottomRight: =0
              RadiusTopLeft: =0
              RadiusTopRight: =0
              Width: =p_h_n_reload.Width * 3 + varPadding * 4
            Children:
            - p_h_n_reload:
                Control: Image
                Properties:
                  OnSelect: |-
                    =/*Start*/
                    Set(varLoading,{Visible: true, Value: 1, Text: "Loading"});

                    UpdateContext({
                        locStartDate: p_start_date.SelectedDate,
                        locEndDate: p_start_date.SelectedDate
                    });

                    /*Collect Production*/
                    If(
                        DateDiff( locStartDate, locEndDate, TimeUnit.Days) <= 10,
                        Set(varLoading,{Visible: true, Value: 25, Text: "Collecting Production Data"});
                        ClearCollect(collectProduction,
                            ForAll(
                                Filter(Production,
                                    Hour_Ending <= DateAdd(locEndDate, 23, TimeUnit.Hours),
                                    Hour_Starting >= DateAdd(locStartDate, -1, TimeUnit.Hours)
                                ),
                                {
                                    id: Value(ThisRecord.ID),
                                    shift: Text(ThisRecord.Shift_Letter),
                                    line: Text(ThisRecord.Line.Value),
                                    lot: Text(ThisRecord.Lot),
                                    catalog: Text(ThisRecord.Catalog),
                                    size: Text(ThisRecord.Size),
                                    hour_ending: DateTimeValue(ThisRecord.Hour_Ending),
                                    hour_starting: DateTimeValue(ThisRecord.Hour_Starting),
                                    goal: Value(ThisRecord.Hourly_Goal),
                                    amount_built: Value(ThisRecord.Amount_Built),
                                    unit_starting: Value(ThisRecord.Unit_Starting),
                                    unit_ending: Value(ThisRecord.Unit_Ending),
                                    reject_labels: Value(ThisRecord.Reject_Labels),
                                    reject_cartridges: Value(ThisRecord.Reject_Cartridges),
                                    reject_units: Value(ThisRecord.Reject_Units),
                                    qa_units: Value(ThisRecord.QA_Units)
                                }
                            )
                        ),

                        DateDiff( locStartDate, locEndDate, TimeUnit.Days) > 20,
                        Set(varLoading,{Visible: true, Value: 25, Text: "Parsing PowerAutomate Flow for Production Data"});
                        ClearCollect(collectProduction,
                            ForAll(
                                Table(
                                    ParseJSON(
                                        flow_get_units_range_v2.Run(
                                            Text("All"),
                                            Text(DateAdd(locEndDate, 23,TimeUnit.Hours), "yyyy-mm-dd"),
                                            Text(DateAdd(locStartDate, -1, TimeUnit.Hours), "yyyy-mm-dd")
                                        ).output
                                    )
                                ),
                                {
                                    id: Value(Value._ID),
                                    shift: Text(Value._shift),
                                    line: Text(Value._line),
                                    lot: Text(Value._lot),
                                    catalog: Text(Value._catalog),
                                    size: Text(Value._size),
                                    hour_ending: DateTimeValue(Value._hour_ending),
                                    hour_starting: DateTimeValue(Value._hour_starting),
                                    goal: Value(Value._goal),
                                    amount_built: Value(Value._amount_built),
                                    unit_starting: Value(Value._unit_starting),
                                    unit_ending: Value(Value._unit_ending),
                                    reject_labels: Value(Value._reject_labels),
                                    reject_cartridges: Value(Value._reject_cartridges),
                                    reject_units: Value(Value._reject_units),
                                    qa_units: Value(Value._qa)
                                }
                            )
                        ),

                        DateDiff( locStartDate, locEndDate, TimeUnit.Days) <= 20,
                        Set(varLoading,{Visible: true, Value: 5, Text: "Collecting Production Dataset 1"});
                        Collect(material_1,
                            Sort(
                                Filter(Production,
                                    And(
                                        Hour_Starting >= DateAdd(locStartDate, -1, TimeUnit.Hours),
                                        Hour_Ending <= DateAdd(locEndDate, 23, TimeUnit.Hours)
                                    )
                                ),
                                Hour_Ending,
                                SortOrder.Ascending
                            )
                        );

                        Set(varLoading,{Visible: true, Value: 10, Text: "Collecting Production Dataset 2"});
                        Collect(material_2,
                            Sort(
                                Filter(Production,
                                    And(
                                        Hour_Starting >= DateAdd(locStartDate, -1, TimeUnit.Hours),
                                        Hour_Ending <= DateAdd(locEndDate, 23, TimeUnit.Hours)
                                    )
                                ),
                                Hour_Ending,
                                SortOrder.Descending
                            )
                        );

                        
                        Set(varLoading,{Visible: true, Value: 15, Text: "Joining Production Dataset 1"});
                        ClearCollect(fusion, material_1);

                        Set(varLoading,{Visible: true, Value: 20, Text: "Joining Production Dataset 2"});
                        Collect(fusion,
                            Filter(material_2, Not(ID in material_1.ID))
                        );

                        Set(varLoading,{Visible: true, Value: 25, Text: "Collecting Joined Production Data"});
                        ClearCollect(
                            collectProduction,
                            ForAll(
                                fusion,
                                {
                                    id: Value(ThisRecord.ID),
                                    shift: Text(ThisRecord.Shift_Letter),
                                    line: Text(ThisRecord.Line.Value),
                                    lot: Text(ThisRecord.Lot),
                                    catalog: Text(ThisRecord.Catalog),
                                    size: Text(ThisRecord.Size),
                                    hour_ending: DateTimeValue(ThisRecord.Hour_Ending),
                                    hour_starting: DateTimeValue(ThisRecord.Hour_Starting),
                                    goal: Value(ThisRecord.Hourly_Goal),
                                    amount_built: Value(ThisRecord.Amount_Built),
                                    unit_starting: Value(ThisRecord.Unit_Starting),
                                    unit_ending: Value(ThisRecord.Unit_Ending),
                                    reject_labels: Value(ThisRecord.Reject_Labels),
                                    reject_cartridges: Value(ThisRecord.Reject_Cartridges),
                                    reject_units: Value(ThisRecord.Reject_Units),
                                    qa_units: Value(ThisRecord.QA_Units)
                                }
                            )
                        );

                        Set(varLoading,{Visible: true, Value: 26, Text: "Garbage Collection"});
                        Clear(fusion);
                        Clear(material_1);
                        Clear(material_2);
                    );

                    /*Collect Downtime*/
                    If(
                        DateDiff( locStartDate, locEndDate, TimeUnit.Days) <= 10,
                        Set(varLoading,{Visible: true, Value: 50, Text: "Collecting Downtime Data"});
                        ClearCollect(collectDowntime,
                            ForAll(
                                Filter(Downtime,
                                    Ended <= DateAdd(locEndDate, 23, TimeUnit.Hours),
                                    Started >= DateAdd(locStartDate, -1, TimeUnit.Hours)
                                ),
                                {
                                    id: Value(ThisRecord.ID),
                                    shift: Text(ThisRecord.Shift_Letter),
                                    line: Text(ThisRecord.Line.Value),
                                    lot: Text(ThisRecord.Lot),
                                    catalog: Text(ThisRecord.Catalog),
                                    size: Text(ThisRecord.Size),
                                    started: DateTimeValue(ThisRecord.Started),
                                    ended: DateTimeValue(ThisRecord.Ended),
                                    reason: Text(ThisRecord.Reason.Value),
                                    total: Value(ThisRecord.Total_Downtime),
                                    comments: Text(ThisRecord.Comments)
                                }
                            )
                        ),

                        DateDiff( locStartDate, locEndDate, TimeUnit.Days) > 20,
                        Set(varLoading,{Visible: true, Value: 50, Text: "Parsing PowerAutomate Flow for Downtime Data"});
                        ClearCollect(collectDowntime,
                            ForAll(
                                Table(
                                    ParseJSON(
                                        flow_get_downtime_range_v2.Run(
                                            Text("All"),
                                            Text(DateAdd(locEndDate, 23,TimeUnit.Hours), "yyyy-mm-dd"),
                                            Text(DateAdd(locStartDate, -1, TimeUnit.Hours), "yyyy-mm-dd")
                                        ).output
                                    )
                                ),
                                {
                                    id: Value(Value._ID),
                                    shift: Text(Value._shift),
                                    line: Text(Value._line),
                                    lot: Text(Value._lot),
                                    catalog: Text(Value._catalog),
                                    size: Text(Value._size),
                                    started: DateTimeValue(Value._started),
                                    ended: DateTimeValue(Value._ended),
                                    reason: Text(Value._reason),
                                    total: Value(Value._total),
                                    comments: Text(Value._comments)
                                }
                            )
                        ),

                        DateDiff( locStartDate, locEndDate, TimeUnit.Days) <= 20,
                        Set(varLoading,{Visible: true, Value: 30, Text: "Collecting Downtime Dataset 1"});
                        Collect(material_1,
                            Sort(
                                Filter(Downtime,
                                    And(
                                        Started >= DateAdd(locStartDate, -1, TimeUnit.Hours),
                                        Ended <= DateAdd(locEndDate, 23, TimeUnit.Hours)
                                    )
                                ),
                                Ended,
                                SortOrder.Ascending
                            )
                        );

                        Set(varLoading,{Visible: true, Value: 35, Text: "Collecting Downtime Dataset 2"});
                        Collect(material_2,
                            Sort(
                                Filter(Downtime,
                                    And(
                                        Started >= DateAdd(locStartDate, -1, TimeUnit.Hours),
                                        Ended <= DateAdd(locEndDate, 23, TimeUnit.Hours)
                                    )
                                ),
                                Ended,
                                SortOrder.Descending
                            )
                        );

                        Set(varLoading,{Visible: true, Value: 40, Text: "Joining Downtime Dataset 1"});
                        ClearCollect(fusion, material_1);

                        Set(varLoading,{Visible: true, Value: 45, Text: "Joining Downtime Dataset 2"});
                        Collect(fusion,
                            Filter(material_2, Not(ID in material_1.ID))
                        );

                        Set(varLoading,{Visible: true, Value: 50, Text: "Collecting Joined Downtime Data"});
                        ClearCollect(
                            collectDowntime,
                            ForAll(
                                fusion,
                                {
                                    id: Value(ThisRecord.ID),
                                    shift: Text(ThisRecord.Shift_Letter),
                                    line: Text(ThisRecord.Line.Value),
                                    lot: Text(ThisRecord.Lot),
                                    catalog: Text(ThisRecord.Catalog),
                                    size: Text(ThisRecord.Size),
                                    started: DateTimeValue(ThisRecord.Started),
                                    ended: DateTimeValue(ThisRecord.Ended),
                                    reason: Text(ThisRecord.Reason.Value),
                                    total: Value(ThisRecord.Total_Downtime),
                                    comments: Text(ThisRecord.Comments)
                                }
                            )
                        );

                        Set(varLoading,{Visible: true, Value: 51, Text: "Garbage Collection"});
                        Clear(fusion);
                        Clear(material_1);
                        Clear(material_2);
                    );

                    Set(varLoading,{Visible: true, Value: 52, Text: "Finshing up"});

                    /*Update*/
                    Select(p_update);
                  Image: =gblAppIcons.Reload
                  Height: =Parent.Height * 0.75
                  HoverBorderColor: =ColorFade(varColorYes, 20%)
                  HoverFill: =ColorFade(varColorAccent, 75%)
                  LayoutMinHeight: =1
                  LayoutMinWidth: =10
                  RadiusBottomLeft: =Self.Width/2
                  RadiusBottomRight: =Self.Width/2
                  RadiusTopLeft: =Self.Width/2
                  RadiusTopRight: =Self.Width/2
                  Width: =Self.Height
                  X: =p_h_n_settings.X - Self.Width - Parent.Width * 0.015
                  Y: =Parent.Height/2 - Self.Height/2
            - p_h_n_bugs:
                Control: Image
                Properties:
                  OnSelect: =Navigate(Bugs)
                  Image: =gblAppIcons.Bug
                  Height: =Parent.Height * 0.75
                  HoverBorderColor: =ColorFade(varColorYes, 20%)
                  HoverFill: =ColorFade(varColorAccent, 75%)
                  LayoutMinHeight: =1
                  LayoutMinWidth: =10
                  RadiusBottomLeft: =Self.Width/2
                  RadiusBottomRight: =Self.Width/2
                  RadiusTopLeft: =Self.Width/2
                  RadiusTopRight: =Self.Width/2
                  Width: =Self.Height
                  X: =Parent.Width * 0.99 - Self.Width
                  Y: =Parent.Height/2 - Self.Height/2
            - p_h_n_settings:
                Control: Image
                Properties:
                  OnSelect: =Navigate(Settings)
                  Image: =gblAppIcons.Settings
                  Height: =Parent.Height * 0.75
                  HoverBorderColor: =ColorFade(varColorYes, 20%)
                  HoverFill: =ColorFade(varColorAccent, 75%)
                  LayoutMinHeight: =1
                  LayoutMinWidth: =10
                  RadiusBottomLeft: =Self.Width/2
                  RadiusBottomRight: =Self.Width/2
                  RadiusTopLeft: =Self.Width/2
                  RadiusTopRight: =Self.Width/2
                  Width: =Self.Height
                  X: =Parent.Width * 0.99 - Self.Width - p_h_n_bugs.Width - Parent.Width * 0.015
                  Y: =Parent.Height/2 - Self.Height/2
            - p_h_n_user:
                Control: Image
                Properties:
                  Image: |
                    =If(IsBlankOrError(User().Image), gblAppIcons.Employee, User().Image)
                  LayoutMinHeight: =1
                  LayoutMinWidth: =1
                  RadiusBottomLeft: =Self.Height / 2
                  RadiusBottomRight: =Self.Height / 2
                  RadiusTopLeft: =Self.Height / 2
                  RadiusTopRight: =Self.Height / 2
                  Width: =Self.Height
    - p_body:
        Control: GroupContainer
        Variant: horizontalAutoLayoutContainer
        Properties:
          AlignInContainer: =AlignInContainer.SetByContainer
          FillPortions: =15
          LayoutAlignItems: =LayoutAlignItems.Stretch
          LayoutMinHeight: =10
          LayoutMinWidth: =10
          LayoutMode: =LayoutMode.Auto
        Children:
        - p_nav:
            Control: GroupContainer
            Variant: horizontalAutoLayoutContainer
            Properties:
              AlignInContainer: =AlignInContainer.SetByContainer
              DropShadow: =DropShadow.None
              Fill: =varColor3
              LayoutAlignItems: =LayoutAlignItems.Stretch
              LayoutDirection: =LayoutDirection.Vertical
              LayoutGap: =varPadding
              LayoutMinHeight: =10
              LayoutMinWidth: =10
              LayoutMode: =LayoutMode.Auto
              PaddingBottom: =varPadding
              PaddingLeft: =varPadding
              PaddingRight: =varPadding
              PaddingTop: =varPadding
              RadiusBottomLeft: =0
              RadiusBottomRight: =0
              RadiusTopLeft: =0
              RadiusTopRight: =0
            Children:
            - p_n_title:
                Control: Text
                Properties:
                  Align: ='TextCanvas.Align'.Center
                  Size: =Self.Height / 3.5
                  Text: =App.ActiveScreen.Name
                  VerticalAlign: ='TextCanvas.VerticalAlign'.Middle
                  Weight: ='TextCanvas.Weight'.Semibold
                  FillPortions: =1
                  LayoutMinHeight: =10
                  LayoutMinWidth: =10
            - p_n_seperator:
                Control: Rectangle
                Properties:
                  Height: =1
                  LayoutMinWidth: =10
            - p_n_gallery:
                Control: Gallery
                Variant: galleryVertical
                Properties:
                  Items: =collectNavigation
                  DelayItemLoading: =true
                  FillPortions: =13
                  Layout: =Layout.Vertical
                  LayoutMinHeight: =1
                  LayoutMinWidth: =1
                  LoadingSpinner: =LoadingSpinner.Data
                  ShowScrollbar: =false
                  TemplatePadding: =0
                  TemplateSize: =(Self.Height - ((Self.AllItemsCount+1) * Self.TemplatePadding)) / Self.AllItemsCount
                Children:
                - p_n_button:
                    Control: Classic/Button
                    Properties:
                      OnSelect: =Navigate(ThisItem.ScreenName);
                      Text: =ThisItem.Title
                      Color: =varColor0
                      DisplayMode: =If(App.ActiveScreen = ThisItem.ScreenName, DisplayMode.Disabled, DisplayMode.Edit)
                      Fill: =varColorAccent
                      FontWeight: =FontWeight.Normal
                      Height: =Parent.TemplateHeight - varPadding
                      Size: =Self.Width / 16
                      Width: =Parent.TemplateWidth - Self.BorderThickness
                      X: =Center(Parent.TemplateWidth, Self.Width)
                      Y: =Center(Parent.TemplateHeight, Self.Height)
            - p_n_footer:
                Control: GroupContainer
                Variant: manualLayoutContainer
                Properties:
                  AlignInContainer: =AlignInContainer.SetByContainer
                  DropShadow: =DropShadow.None
                  FillPortions: =2
                  LayoutMinHeight: =10
                  LayoutMinWidth: =10
                  RadiusBottomLeft: =0
                  RadiusBottomRight: =0
                  RadiusTopLeft: =0
                  RadiusTopRight: =0
                Children:
                - p_n_f_text:
                    Control: Text
                    Properties:
                      Align: ='TextCanvas.Align'.Center
                      Size: =8
                      Text: ="MilliporeSigma is the U.S. and Canada Life Science business of Merck KGaA, Darmstadt, Germany."
                      VerticalAlign: ='TextCanvas.VerticalAlign'.Bottom
                      Height: =Parent.Height
                      Width: =Parent.Width
        - p_main:
            Control: GroupContainer
            Variant: horizontalAutoLayoutContainer
            Properties:
              AlignInContainer: =AlignInContainer.SetByContainer
              DropShadow: =DropShadow.None
              FillPortions: =11
              LayoutAlignItems: =LayoutAlignItems.Stretch
              LayoutGap: =varPadding
              LayoutMinHeight: =10
              LayoutMinWidth: =10
              LayoutMode: =LayoutMode.Auto
              PaddingBottom: =varPadding
              PaddingLeft: =varPadding
              PaddingRight: =varPadding
              PaddingTop: =varPadding
              RadiusBottomLeft: =0
              RadiusBottomRight: =0
              RadiusTopLeft: =0
              RadiusTopRight: =0
            Children:
            - p_controls:
                Control: GroupContainer
                Variant: horizontalAutoLayoutContainer
                Properties:
                  AlignInContainer: =AlignInContainer.SetByContainer
                  Fill: =varColor4
                  LayoutAlignItems: =LayoutAlignItems.Stretch
                  LayoutDirection: =LayoutDirection.Vertical
                  LayoutGap: =varPadding
                  LayoutMinHeight: =10
                  LayoutMinWidth: =10
                  LayoutMode: =LayoutMode.Auto
                  PaddingBottom: =varPadding
                  PaddingLeft: =varPadding
                  PaddingRight: =varPadding
                  PaddingTop: =varPadding
                Children:
                - p_start_date_title:
                    Control: Text
                    Properties:
                      Align: ='TextCanvas.Align'.Center
                      Size: =Self.Height / 3
                      Text: ="Date"
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - p_start_date:
                    Control: DatePicker
                    Properties:
                      OnChange: =Select(p_collect);
                      FontSize: =Self.Height / 3.5
                      Format: ="Short"
                      SelectedDate: =varNowDay
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - p_seperator_0:
                    Control: Rectangle
                    Properties:
                      Height: =1
                      LayoutMinWidth: =10
                - p_shift_title:
                    Control: Text
                    Properties:
                      Align: ='TextCanvas.Align'.Center
                      Size: =Self.Height / 3
                      Text: ="Shift"
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - p_shift:
                    Control: DropDown
                    Variant: pcfdataset
                    Properties:
                      OnChange: =Select(p_update)
                      Appearance: ='DropdownCanvas.Appearance'.FilledDarker
                      DefaultSelectedItems: |-
                        =//{Value: "All"}
                      FontSize: =Self.Height / 3
                      Items: =["All","C","A","B"]
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - p_seperator_1:
                    Control: Rectangle
                    Properties:
                      Height: =1
                      LayoutMinWidth: =10
                - p_c_footer:
                    Control: GroupContainer
                    Variant: manualLayoutContainer
                    Properties:
                      AlignInContainer: =AlignInContainer.SetByContainer
                      DropShadow: =DropShadow.None
                      FillPortions: =12
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                      RadiusBottomLeft: =0
                      RadiusBottomRight: =0
                      RadiusTopLeft: =0
                      RadiusTopRight: =0
            - p_section:
                Control: GroupContainer
                Variant: verticalAutoLayoutContainer
                Properties:
                  AlignInContainer: =AlignInContainer.SetByContainer
                  DropShadow: =DropShadow.None
                  FillPortions: =9
                  LayoutAlignItems: =LayoutAlignItems.Center
                  LayoutDirection: =LayoutDirection.Vertical
                  LayoutMinHeight: =10
                  LayoutMinWidth: =10
                  LayoutMode: =LayoutMode.Auto
                  RadiusBottomLeft: =0
                  RadiusBottomRight: =0
                  RadiusTopLeft: =0
                  RadiusTopRight: =0
                Children:
                - p_top:
                    Control: GroupContainer
                    Variant: horizontalAutoLayoutContainer
                    Properties:
                      DropShadow: =DropShadow.None
                      LayoutAlignItems: =LayoutAlignItems.Stretch
                      LayoutGap: =varPadding
                      LayoutMinHeight: =1
                      LayoutMinWidth: =1
                      LayoutMode: =LayoutMode.Auto
                      RadiusBottomLeft: =0
                      RadiusBottomRight: =0
                      RadiusTopLeft: =0
                      RadiusTopRight: =0
                    Children:
                    - p_t_gallery:
                        Control: Gallery
                        Variant: galleryHorizontal
                        Properties:
                          Items: =["XL1","SSC","XL2","SSC2","XL3","XLT","XL4","XLT2","XL5","XLT3"]
                          WrapCount: =2
                          AlignInContainer: =AlignInContainer.SetByContainer
                          DelayItemLoading: =true
                          LayoutMinHeight: =10
                          LayoutMinWidth: =10
                          LoadingSpinner: =LoadingSpinner.Data
                          ShowScrollbar: =false
                          TemplatePadding: =0
                          TemplateSize: =Self.Width / 5
                        Children:
                        - p_t_g_spacer:
                            Control: GroupContainer
                            Variant: manualLayoutContainer
                            Properties:
                              DropShadow: =DropShadow.None
                              Height: =Parent.TemplateHeight
                              PaddingBottom: =Home.Width * 0.005
                              PaddingLeft: =Home.Width * 0.005
                              PaddingRight: =Home.Width * 0.005
                              PaddingTop: =Home.Width * 0.005
                              RadiusBottomLeft: =0
                              RadiusBottomRight: =0
                              RadiusTopLeft: =0
                              RadiusTopRight: =0
                              Width: =Parent.TemplateWidth
                              X: =Self.Width - Self.Width
                              Y: =Self.Height - Self.Height
                            Children:
                            - p_t_g_card:
                                Control: GroupContainer
                                Variant: verticalAutoLayoutContainer
                                Properties:
                                  BorderColor: =varColor2
                                  DropShadow: =DropShadow.Semilight
                                  Fill: =varColor3
                                  Height: =Parent.Height - Parent.PaddingTop
                                  LayoutAlignItems: =LayoutAlignItems.Stretch
                                  LayoutDirection: =LayoutDirection.Vertical
                                  LayoutGap: =Self.Width * 0.030
                                  LayoutMode: =LayoutMode.Auto
                                  PaddingBottom: =Self.LayoutGap
                                  RadiusBottomLeft: =8
                                  RadiusBottomRight: =8
                                  RadiusTopLeft: =8
                                  RadiusTopRight: =8
                                  Width: =Parent.Width - Parent.PaddingRight
                                  X: =Parent.Width/2 - Self.Width/2
                                  Y: =Parent.Height/2 - Self.Height/2
                                Children:
                                - p_t_g_header:
                                    Control: GroupContainer
                                    Variant: manualLayoutContainer
                                    Properties:
                                      AlignInContainer: =AlignInContainer.SetByContainer
                                      DropShadow: =DropShadow.None
                                      LayoutMinHeight: =10
                                      LayoutMinWidth: =10
                                      RadiusBottomLeft: =0
                                      RadiusBottomRight: =0
                                      RadiusTopLeft: =0
                                      RadiusTopRight: =0
                                    Children:
                                    - p_t_g_h_title:
                                        Control: Label
                                        Properties:
                                          Text: =ThisItem.Value
                                          Align: =Align.Center
                                          Color: =varColor5
                                          Fill: =varColor2
                                          Font: =Font.Verdana
                                          Height: =Parent.Height
                                          Size: =Self.Height / 2
                                          Width: =Parent.Width
                                - p_t_g_row_1:
                                    Control: GroupContainer
                                    Variant: verticalAutoLayoutContainer
                                    Properties:
                                      AlignInContainer: =AlignInContainer.SetByContainer
                                      DropShadow: =DropShadow.None
                                      Fill: =RGBA(0,0,0,0)
                                      FillPortions: =3
                                      Height: =10
                                      LayoutAlignItems: =LayoutAlignItems.Stretch
                                      LayoutGap: =Parent.LayoutGap
                                      LayoutMinHeight: =1
                                      LayoutMinWidth: =10
                                      LayoutMode: =LayoutMode.Auto
                                      PaddingBottom: =varPadding
                                      PaddingLeft: =Self.LayoutGap
                                      PaddingRight: =Self.LayoutGap
                                      PaddingTop: =
                                      RadiusBottomLeft: =0
                                      RadiusBottomRight: =0
                                      RadiusTopLeft: =0
                                      RadiusTopRight: =0
                                      Width: =Parent.Width
                                      X: =Parent.Width/2 - Self.Width/2
                                      Y: =1
                                    Children:
                                    - p_t_g_performance:
                                        Control: GroupContainer
                                        Variant: verticalAutoLayoutContainer
                                        Properties:
                                          DropShadow: =DropShadow.Semilight
                                          Fill: =varColor5
                                          Height: =10
                                          LayoutAlignItems: =LayoutAlignItems.Stretch
                                          LayoutDirection: =LayoutDirection.Vertical
                                          LayoutMinWidth: =10
                                          LayoutMode: =LayoutMode.Auto
                                          Width: =Self.Height
                                          X: =Parent.Width/2 - Self.Width/2
                                          Y: =1
                                        Children:
                                        - p_t_g_p_graph:
                                            Control: Image
                                            Properties:
                                              Image: |-
                                                ="https://quickchart.io/chart?width=" &Self.Width& "&height=" &Self.Height*0.90& "&c=" & 
                                                EncodeUrl("{
                                                  type: 'radialGauge',
                                                  data: {
                                                    datasets: [{
                                                      data: [" & Value(LookUp(collectPerformance, line = p_t_g_h_title.Text ).performance) & "],
                                                      backgroundColor: getGradientFillHelper('horizontal', ['blue', 'blue', 'blue', 'red', 'red', 'red']),
                                                    }]
                                                  },
                                                  options: {
                                                    domain: [0, "& If(Value(LookUp(collectPerformance, line = p_t_g_h_title.Text ).performance) <= 100, 100, Value(LookUp(collectPerformance, line = p_t_g_h_title.Text ).performance)) &"],
                                                    trackColor: 'white', 
                                                    centerPercentage: 90,
                                                    centerArea: {
                                                      text: (val) => val + '%',
                                                      fontColor: 'black'
                                                    },
                                                  }
                                                }"
                                                )
                                              AlignInContainer: =AlignInContainer.Stretch
                                              FillPortions: =1
                                              Height: =Parent.Height * 0.30
                                              Width: =Parent.Width / 2
                                              X: =Parent.Width /2 - Self.Width/2
                                              Y: =1
                                - p_t_g_row_2:
                                    Control: GroupContainer
                                    Variant: verticalAutoLayoutContainer
                                    Properties:
                                      AlignInContainer: =AlignInContainer.SetByContainer
                                      DropShadow: =DropShadow.None
                                      Fill: =RGBA(0,0,0,0)
                                      FillPortions: =4
                                      Height: =10
                                      LayoutAlignItems: =LayoutAlignItems.Stretch
                                      LayoutDirection: =LayoutDirection.Vertical
                                      LayoutGap: =Parent.LayoutGap
                                      LayoutMinHeight: =1
                                      LayoutMinWidth: =10
                                      LayoutMode: =LayoutMode.Auto
                                      PaddingBottom: =
                                      PaddingLeft: =Self.LayoutGap
                                      PaddingRight: =Self.LayoutGap
                                      PaddingTop: =
                                      RadiusBottomLeft: =0
                                      RadiusBottomRight: =0
                                      RadiusTopLeft: =0
                                      RadiusTopRight: =0
                                      Width: =Parent.Width
                                      X: =Parent.Width/2 - Self.Width/2
                                      Y: =1
                                    Children:
                                    - p_t_g_goal:
                                        Control: GroupContainer
                                        Variant: verticalAutoLayoutContainer
                                        Properties:
                                          AlignInContainer: =AlignInContainer.SetByContainer
                                          DropShadow: =DropShadow.Semilight
                                          Fill: =ColorFade(varColorAccent, 65%)
                                          Height: =10
                                          LayoutAlignItems: =LayoutAlignItems.Stretch
                                          LayoutMinHeight: =10
                                          LayoutMinWidth: =10
                                          LayoutMode: =LayoutMode.Auto
                                          Width: =Self.Height
                                          X: =Parent.Width/2 - Self.Width/2
                                          Y: =1
                                        Children:
                                        - p_t_g_g_title:
                                            Control: Label
                                            Properties:
                                              Text: ="Goal"
                                              Align: =Align.Center
                                              Color: =varColor0
                                              Fill: =varColor4
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              Height: =Parent.Height * 0.10
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 5
                                              Width: =Parent.Width
                                        - p_t_g_g_value:
                                            Control: Label
                                            Properties:
                                              Text: |-
                                                =Value(LookUp(collectPerformance, line = p_t_g_h_title.Text ).goal) & "%
                                                "
                                                & Value(LookUp(collectPerformance, line = p_t_g_h_title.Text ).amount_built) &" / "
                                                & Value(LookUp(collectPerformance, line = p_t_g_h_title.Text ).goal_sum)
                                              Align: =Align.Center
                                              Color: =varColor0
                                              Fill: =RGBA(0,0,0,0)
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              Height: =Parent.Height * 0.10
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 5
                                              Width: =Parent.Width
                                    - p_t_g_downtime:
                                        Control: GroupContainer
                                        Variant: verticalAutoLayoutContainer
                                        Properties:
                                          AlignInContainer: =AlignInContainer.SetByContainer
                                          DropShadow: =DropShadow.Semilight
                                          Fill: =ColorFade(varColorAccent, 65%)
                                          Height: =10
                                          LayoutAlignItems: =LayoutAlignItems.Stretch
                                          LayoutMinHeight: =10
                                          LayoutMinWidth: =10
                                          LayoutMode: =LayoutMode.Auto
                                          Width: =Self.Height
                                          X: =Parent.Width/2 - Self.Width/2
                                          Y: =p_t_g_goal.Y + p_t_g_goal.Height + Parent.Width * 0.05
                                        Children:
                                        - p_t_g_d_title:
                                            Control: Label
                                            Properties:
                                              Text: ="Downtime"
                                              Align: =Align.Center
                                              Color: =varColor0
                                              Fill: =varColor4
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              Height: =Parent.Height * 0.10
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 5
                                              Width: =Parent.Width
                                        - p_t_g_d_value:
                                            Control: Label
                                            Properties:
                                              Text: |-
                                                =LookUp(collectPerformance, line = p_t_g_h_title.Text).downtime & "%
                                                " &
                                                LookUp(collectPerformance, line = p_t_g_h_title.Text).downtime_sum & " Minutes"
                                              Align: =Align.Center
                                              Color: =varColor0
                                              Fill: =RGBA(0,0,0,0)
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              Height: =Parent.Height * 0.10
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 5
                                              Width: =Parent.Width
                                    - p_t_g_yield:
                                        Control: GroupContainer
                                        Variant: verticalAutoLayoutContainer
                                        Properties:
                                          AlignInContainer: =AlignInContainer.SetByContainer
                                          DropShadow: =DropShadow.Semilight
                                          Fill: =ColorFade(varColorAccent, 65%)
                                          Height: =10
                                          LayoutAlignItems: =LayoutAlignItems.Stretch
                                          LayoutMinHeight: =10
                                          LayoutMinWidth: =10
                                          LayoutMode: =LayoutMode.Auto
                                          Width: =Self.Height
                                          X: =Parent.Width/2 - Self.Width/2
                                          Y: =1
                                        Children:
                                        - p_t_g_y_title:
                                            Control: Label
                                            Properties:
                                              Text: ="Yield"
                                              Align: =Align.Center
                                              Color: =varColor0
                                              Fill: =varColor4
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              Height: =Parent.Height * 0.10
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 5
                                              Width: =Parent.Width
                                        - p_t_g_y_value:
                                            Control: Label
                                            Properties:
                                              Text: |-
                                                =Value(LookUp(collectPerformance, line = p_t_g_h_title.Text ).yield) & "%
                                                " &
                                                Value(LookUp(collectPerformance, line = p_t_g_h_title.Text ).yield_total) & " / " &
                                                Value(LookUp(collectPerformance, line = p_t_g_h_title.Text ).yield_sum)
                                              Align: =Align.Center
                                              Color: =varColor0
                                              Fill: =RGBA(0,0,0,0)
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              Height: =Parent.Height * 0.10
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 5
                                              Width: =Parent.Width
