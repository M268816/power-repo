- c_layout:
    Control: GroupContainer
    Variant: verticalAutoLayoutContainer
    Properties:
      DropShadow: =DropShadow.None
      Height: =Parent.Height
      LayoutAlignItems: =LayoutAlignItems.Stretch
      LayoutDirection: =LayoutDirection.Vertical
      LayoutGap: =
      LayoutMode: =LayoutMode.Auto
      RadiusBottomLeft: =0
      RadiusBottomRight: =0
      RadiusTopLeft: =0
      RadiusTopRight: =0
      Width: =Parent.Width
      X: =
    Children:
    - c_header:
        Control: GroupContainer
        Variant: horizontalAutoLayoutContainer
        Properties:
          AlignInContainer: =AlignInContainer.SetByContainer
          DropShadow: =DropShadow.None
          Fill: =varColor1
          LayoutAlignItems: =LayoutAlignItems.Stretch
          LayoutGap: =varPadding
          LayoutMinHeight: =10
          LayoutMinWidth: =10
          LayoutMode: =LayoutMode.Auto
          PaddingBottom: =varPadding
          PaddingLeft: =varPadding
          PaddingRight: =varPadding
          PaddingTop: =varPadding
          RadiusBottomLeft: =0
          RadiusBottomRight: =0
          RadiusTopLeft: =0
          RadiusTopRight: =0
        Children:
        - c_update:
            Control: Classic/Button
            Properties:
              OnSelect: |-
                =/*Update Code*/
                Set(varLoading,{Visible: true, Value: 10, Text: "Updating"});

                UpdateContext(
                    {        
                        count_of_days:
                            RoundDown(
                                DateDiff(c_start_date.SelectedDate, c_end_date.SelectedDate, TimeUnit.Days) / 7,
                                0
                            ) * 5 +
                            Mod(5 + Weekday(c_end_date.SelectedDate) - Weekday(c_start_date.SelectedDate), 5) + 1
                    }
                );

                Set(varLoading,{Visible: true, Value: 20, Text: "Creating Default Filters"});
                /*Set Default Filters*/
                /*Production*/
                UpdateContext({
                    locDefaultProductionFilter:
                        Filter(
                            collectProduction,
                            And(
                                hour_starting >= DateAdd(c_start_date.SelectedDate, -1, TimeUnit.Hours),
                                hour_ending <= DateAdd(c_end_date.SelectedDate, 23, TimeUnit.Hours)
                            ),
                            If(
                                Not(c_size.Selected.Size = "All"),
                                size = c_size.Selected.Size,
                                true
                            ),
                            If(
                                Not(c_shift.Selected.Value = "All"),
                                shift = c_shift.Selected.Value,
                                true
                            )
                        )
                });

                /*Downtime*/
                UpdateContext({
                    locDefaultDowntimeFilter:
                        Filter(
                            collectDowntime,
                            And(
                                started >= DateAdd(c_start_date.SelectedDate, -1, TimeUnit.Hours),
                                ended <= DateAdd(c_end_date.SelectedDate, 23, TimeUnit.Hours)
                            ),
                            If(
                                Not(c_size.Selected.Size = "All"),
                                size = c_size.Selected.Size,
                                true
                            ),
                            If(
                                Not(c_shift.Selected.Value = "All"),
                                shift = c_shift.Selected.Value,
                                true
                            )
                        )
                });

                /*Goal_Setting*/
                UpdateContext({
                    locDefaultGoalSetting:
                        ShowColumns(
                            Filter(Goal_Settings,
                                Constraint_Setting > 0,
                                If(
                                    c_size.Selected.Size = "All",
                                    Size.Value = Size.Value,
                                    Size.Value = c_size.Selected.Size
                                )
                            ),
                            Constraint_Setting,
                            Goal_Setting,
                            Line,
                            Size
                        )
                });

                Set(varLoading,{Visible: true, Value: 30, Text: "Combining Databases"});
                /*Combine to find runtime*/
                Clear(collectCombined);
                ClearCollect(collectCombined, locDefaultProductionFilter);
                ForAll(
                    collectLineSchema,
                    {
                        Line: SCH_Line,
                        
                        Value:
                        ForAll(
                            Filter(locDefaultDowntimeFilter, line = SCH_Line),
                            With(
                                {
                                    thisDowntime: ThisRecord,
                                    thisLine: SCH_Line
                                },
                                If(
                                    CountRows(Filter(locDefaultProductionFilter, line = thisLine,
                                        (hour_starting <= thisDowntime.started && hour_ending > thisDowntime.started) || 
                                        (hour_starting < thisDowntime.ended && hour_ending >= thisDowntime.ended) ||
                                        (hour_starting >= thisDowntime.started && hour_ending <= thisDowntime.ended)
                                        )) = 0,
                                    Collect(collectCombined, thisDowntime)
                                )
                            )
                        )
                    }
                );

                Set(varLoading,{Visible: true, Value: 50, Text: "Calculating Line Data"});
                /*Create a collection of OEE data for each line*/
                Clear(collectLineOEE);
                ForAll(collectLineSchema,
                    Collect(
                        collectLineOEE,
                        {
                            /*Shift*/
                            shift: c_shift.Selected.Value,

                            line: SCH_Line,

                            /*Goal Average per contraint operation*/
                            constraint_average:
                                Round(
                                    /*If a size is not selected, find the Average, otherwise find the size's constraint setting*/
                                    If(
                                        c_size.Selected.Size = "All",
                                        
                                        IfError(
                                            Average(
                                                Filter(
                                                    locDefaultGoalSetting,
                                                    Line.Value = SCH_Line
                                                ),
                                                Constraint_Setting
                                            ),
                                            0
                                        ),
                                        
                                        First(
                                            Filter(
                                                locDefaultGoalSetting,
                                                Line.Value = SCH_Line
                                            )
                                        ).Constraint_Setting
                                    ),
                                    0
                                ),

                            /*Constratint setting by runtime*/
                            constraint_total:
                                Round(
                                    /*If a size is not selected, find the Average, otherwise find the size's constraint setting*/
                                    If(
                                        c_size.Selected.Size = "All",
                                        
                                        IfError(
                                            Average(
                                                Filter(
                                                    locDefaultGoalSetting,
                                                    Line.Value = SCH_Line
                                                ),
                                                Constraint_Setting
                                            ),
                                            0
                                        ),
                                        
                                        First(
                                            Filter(
                                                locDefaultGoalSetting,
                                                Line.Value = SCH_Line
                                            )
                                        ).Constraint_Setting
                                    ) *
                                /*Collect Runtime Minutes From Production*/
                                ((CountRows(Filter(collectCombined, line = SCH_Line, amount_built > 0)) * 60) +
                                /*Collect Runtime Minues From Downtime*/
                                Sum(Filter(collectCombined, line = SCH_Line, Not(reason = "Planned Downtime" || reason = "No Scheduled Work" || reason = "Engineering DT")), total))/60,
                                    0
                                ),

                            /*Total sum of Units Built*/
                            total:
                                Sum(
                                    Filter(
                                        locDefaultProductionFilter,
                                        line = SCH_Line
                                    ),
                                    amount_built + reject_cartridges + reject_units
                                ),
                            
                            /*Sum of Good Units Built*/
                            output:
                                Sum(
                                    Filter(
                                        locDefaultProductionFilter,
                                        line = SCH_Line
                                    ),
                                    amount_built
                                ),
                            
                            /*Sum of Rejects*/
                            rejects:
                                Sum(
                                    Filter(
                                        locDefaultProductionFilter,
                                        line = SCH_Line
                                    ),
                                    reject_cartridges + reject_units
                                ),

                            /*Sum of Downtime, in minutes*/
                            downtime_total:
                                Sum(
                                    Filter(
                                        locDefaultDowntimeFilter,
                                        line = SCH_Line
                                    ),
                                    total
                                ),
                            
                            /*Sum of planned downtime in minutes*/
                            downtime_planned:
                                Sum(
                                    Filter(
                                        locDefaultDowntimeFilter,
                                        line = SCH_Line,
                                        reason = "No Scheduled Work" || reason = "Engineering DT" || reason = "Planned Downtime"
                                    ),
                                    total
                                ),
                            
                            runtime_hours:
                                /*Collect Runtime Minutes From Production*/
                                ((CountRows(Filter(collectCombined, line = SCH_Line, amount_built > 0)) * 60) +
                                /*Collect Runtime Minues From Downtime*/
                                Sum(Filter(collectCombined, line = SCH_Line, Not(reason = "Planned Downtime" || reason = "No Scheduled Work" || reason = "Engineering DT")), total))/60,
                            
                            runtime_total:
                                (    
                                    (count_of_days * If(c_shift.Selected.Value = "All", 1440, 480))
                                ) / 60,
                            

                            /*Percentage of Overall Performance || OEE2 = Output / (Constraint * Runtime) * 100*/
                            OEE2:
                                IfError(
                                    Round(
                                        /*Output*/
                                        Sum(
                                            Filter(
                                                locDefaultProductionFilter,
                                                line = SCH_Line
                                            ),
                                            amount_built
                                        ) /
                                        (
                                            /*Constraint*/
                                            (
                                                Round(
                                                    /*If a size is not selected, find the Average, otherwise find the size's constraint setting*/
                                                    If(
                                                        c_size.Selected.Size = "All",
                                                        
                                                        IfError(
                                                            Average(
                                                                Filter(
                                                                    locDefaultGoalSetting,
                                                                    Line.Value = SCH_Line
                                                                ),
                                                                Constraint_Setting
                                                            ),
                                                            0
                                                        ),
                                                        
                                                        First(
                                                            Filter(
                                                                locDefaultGoalSetting,
                                                                Line.Value = SCH_Line
                                                            )
                                                        ).Constraint_Setting
                                                    ),
                                                    0
                                                )
                                            ) *
                                            /*Runtime Hours*/
                                            (
                                                /*Collect Runtime Minutes From Production*/
                                                ((CountRows(Filter(collectCombined, line = SCH_Line, amount_built > 0)) * 60) +
                                                /*Collect Runtime Minues From Downtime*/
                                                Sum(Filter(collectCombined, line = SCH_Line, Not(reason = "Planned Downtime" || reason = "No Scheduled Work" || reason = "Engineering DT")), total))/60
                                            )
                                        ) * 100,
                                        0
                                    ),
                                    0
                                )
                        }
                    )
                );

                Set(varLoading,{Visible: true, Value: 75, Text: "Calculating OEE2"});
                /*Collect overall OEE*/
                Clear(collectOEE2);
                Collect(
                    collectOEE2,
                    {
                        output:
                            Sum(
                                locDefaultProductionFilter,
                                amount_built
                            ),
                        
                        constraint_average:
                            Round(
                                /*If a size is not selected, find the Average, otherwise find the size's constraint setting*/
                                If(
                                    c_size.Selected.Size = "All",
                                    
                                    IfError(
                                        Average(
                                            locDefaultGoalSetting,
                                            Constraint_Setting
                                        ),
                                        0
                                    ),
                                    
                                    First(
                                        locDefaultGoalSetting
                                    ).Constraint_Setting
                                ),
                                0
                            ),

                        constraint_goal:
                            Round(
                                /*If a size is not selected, find the Average, otherwise find the size's constraint setting*/
                                If(
                                    c_size.Selected.Size = "All",
                                    
                                    IfError(
                                        Average(
                                            locDefaultGoalSetting,
                                            Constraint_Setting
                                        ),
                                        0
                                    ),
                                    
                                    First(
                                        locDefaultGoalSetting
                                    ).Constraint_Setting
                                ),
                                0
                            ) *
                            /*Collect Runtime Minutes From Production*/
                            ((CountRows(Filter(collectCombined, amount_built > 0)) * 60) +
                            /*Collect Runtime Minues From Downtime*/
                            Sum(Filter(collectCombined, Not(reason = "Planned Downtime" || reason = "No Scheduled Work" || reason = "Engineering DT")), total))/60,

                        runtime_hours_planned:
                            /*Collect Runtime Minutes From Production*/
                            ((CountRows(Filter(collectCombined, amount_built > 0)) * 60) +
                            /*Collect Runtime Minues From Downtime*/
                            Sum(Filter(collectCombined, Not(reason = "Planned Downtime" || reason = "No Scheduled Work" || reason = "Engineering DT")), total))/60,
                        
                        runtime_hours:
                            /*Collect Runtime Minutes From Production*/
                            ((CountRows(Filter(collectCombined, amount_built > 0)) * 60) +
                            /*Collect Runtime Minues From Downtime*/
                            Sum(collectCombined, total))/60,

                        runtime_test:
                            (    
                                (count_of_days * 9 * 1440) - 
                                Sum(
                                    Filter(
                                        locDefaultDowntimeFilter,
                                        reason = "No Scheduled Work" || reason = "Engineering DT" || reason = "Planned Downtime"
                                    ),
                                    total
                                )*1
                            ) / 60,
                        
                        OEE1:
                            IfError(
                                Round(
                                    /*Output*/
                                    Sum(
                                        locDefaultProductionFilter,
                                        amount_built
                                    ) /
                                    (
                                        /*Constraint*/
                                        (
                                            Round(
                                                /*If a size is not selected, find the Average, otherwise find the size's constraint setting*/
                                                If(
                                                    c_size.Selected.Size = "All",
                                                    
                                                    IfError(
                                                        Average(
                                                            locDefaultGoalSetting,
                                                            Constraint_Setting
                                                        ),
                                                        0
                                                    ),
                                                    
                                                    First(
                                                        locDefaultGoalSetting
                                                    ).Constraint_Setting
                                                ),
                                                0
                                            )
                                        ) *
                                        /*Runtime Hours*/
                                        (
                                            /*Collect Runtime Minutes From Production*/
                                            ((CountRows(Filter(collectCombined, amount_built > 0)) * 60) +
                                            /*Collect Runtime Minues From Downtime*/
                                            Sum(collectCombined, total))/60
                                        )
                                    ) * 100,
                                    0
                                ),
                                0
                            ),

                        TestOEE2:
                            IfError(Sum(collectLineOEE, OEE2) / CountIf(collectLineOEE, OEE2 > 0),0),
                        
                        OEE2:
                            IfError(
                                Round(
                                    /*Output*/
                                    Sum(
                                        locDefaultProductionFilter,
                                        amount_built
                                    ) /
                                    (
                                        /*Constraint*/
                                        (
                                            Round(
                                                /*If a size is not selected, find the Average, otherwise find the size's constraint setting*/
                                                If(
                                                    c_size.Selected.Size = "All",
                                                    
                                                    IfError(
                                                        Average(
                                                            locDefaultGoalSetting,
                                                            Constraint_Setting
                                                        ),
                                                        0
                                                    ),
                                                    
                                                    First(
                                                        locDefaultGoalSetting
                                                    ).Constraint_Setting
                                                ),
                                                0
                                            )
                                        ) *
                                        /*Runtime Hours*/
                                        (
                                            /*Collect Runtime Minutes From Production*/
                                            ((CountRows(Filter(collectCombined, amount_built > 0)) * 60) +
                                            /*Collect Runtime Minues From Downtime*/
                                            Sum(Filter(collectCombined, Not(reason = "Planned Downtime" || reason = "No Scheduled Work" || reason = "Engineering DT")), total))/60
                                        )
                                    ) * 100,
                                    0
                                ),
                                0
                            )
                    }
                );

                /*Garbage Collecting*/
                Set(varLoading,{Visible: true, Value: 95, Text: "Finishing Up"});

                /*End*/
                Set(varLoading,{Visible: true, Value: 100, Text: "Completed"});
                Set(varLoading,{Visible: false, Value: -1, Text: "Not Loading"});
              Text: ="update"
              Visible: =false
              X: =20
              Y: =20
        - c_collect:
            Control: Classic/Button
            Properties:
              OnSelect: |-
                =/*Start*/
                Set(varLoading,{Visible: true, Value: 1, Text: "Loading"});

                Set(varLoading,{Visible: true, Value: 5, Text: "Checking for updates"});
                /*Capture Local Date Selection*/
                UpdateContext({
                    locEndDate: c_end_date.SelectedDate,
                    locStartDate: c_start_date.SelectedDate
                });

                /*Check if collections need updating*/
                Set(varUpdateProduction,
                    Or(
                        Not(First(Sort(Production,ID,SortOrder.Descending)).ID = First(Sort(collectProduction,id,SortOrder.Descending)).id),
                        Not(varEndDate = locEndDate),
                        Not(varStartDate = locStartDate)
                    )
                );
                Set(varUpdateDowntime,
                    Or(    
                        Not(First(Sort(Downtime,ID,SortOrder.Descending)).ID = First(Sort(collectDowntime,id,SortOrder.Descending)).id),
                        Not(varEndDate = locEndDate),
                        Not(varStartDate = locStartDate)
                    )
                );

                /*Set collection dates from selected local dates*/
                If( Not(varEndDate = locEndDate), Set(varEndDate, locEndDate));
                If( Not(varStartDate = locStartDate), Set(varStartDate, locStartDate));


                /*Collect Production*/
                Set(varLoading,{Visible: true, Value: 10, Text: "Collecting Production Data"});
                If(varUpdateProduction,
                    If(
                        DateDiff( varStartDate, varEndDate, TimeUnit.Days) <= 14,
                        Set(varLoading,{Visible: true, Value: 60, Text: "Retrieving Production Data"});
                        ClearCollect(collectProduction,
                            ForAll(
                                Filter(Production,
                                    Hour_Ending <= DateAdd(varEndDate, 23, TimeUnit.Hours),
                                    Hour_Starting >= DateAdd(varStartDate, -1, TimeUnit.Hours)
                                ),
                                {
                                    id: Value(ThisRecord.ID),
                                    shift: Text(ThisRecord.Shift_Letter),
                                    line: Text(ThisRecord.Line.Value),
                                    lot: Text(ThisRecord.Lot),
                                    catalog: Text(ThisRecord.Catalog),
                                    size: Text(ThisRecord.Size),
                                    hour_ending: DateTimeValue(ThisRecord.Hour_Ending),
                                    hour_starting: DateTimeValue(ThisRecord.Hour_Starting),
                                    goal: Value(ThisRecord.Hourly_Goal),
                                    amount_built: Value(ThisRecord.Amount_Built),
                                    unit_starting: Value(ThisRecord.Unit_Starting),
                                    unit_ending: Value(ThisRecord.Unit_Ending),
                                    reject_labels: Value(ThisRecord.Reject_Labels),
                                    reject_cartridges: Value(ThisRecord.Reject_Cartridges),
                                    reject_units: Value(ThisRecord.Reject_Units),
                                    qa_units: Value(ThisRecord.QA_Units)
                                }
                            )
                        ),

                        DateDiff( varStartDate, varEndDate, TimeUnit.Days) > 21,
                        Set(varLoading,{Visible: true, Value: 60, Text: "Parsing PowerAutomate Flow for Production Data"});
                        ClearCollect(collectProduction,
                            ForAll(
                                Table(
                                    ParseJSON(
                                        flow_get_units_range_v2.Run(
                                            Text("All"),
                                            Text(DateAdd(varEndDate, 23,TimeUnit.Hours), "yyyy-mm-dd"),
                                            Text(DateAdd(varStartDate, -1, TimeUnit.Hours), "yyyy-mm-dd")
                                        ).output
                                    )
                                ),
                                {
                                    id: Value(Value._ID),
                                    shift: Text(Value._shift),
                                    line: Text(Value._line),
                                    lot: Text(Value._lot),
                                    catalog: Text(Value._catalog),
                                    size: Text(Value._size),
                                    hour_ending: DateTimeValue(Value._hour_ending),
                                    hour_starting: DateTimeValue(Value._hour_starting),
                                    goal: Value(Value._goal),
                                    amount_built: Value(Value._amount_built),
                                    unit_starting: Value(Value._unit_starting),
                                    unit_ending: Value(Value._unit_ending),
                                    reject_labels: Value(Value._reject_labels),
                                    reject_cartridges: Value(Value._reject_cartridges),
                                    reject_units: Value(Value._reject_units),
                                    qa_units: Value(Value._qa)
                                }
                            )
                        ),

                        DateDiff( varStartDate, varEndDate, TimeUnit.Days) <= 21,
                        Set(varLoading,{Visible: true, Value: 25, Text: "Collecting Production Dataset 1"});
                        Collect(material_1,
                            Sort(
                                Filter(Production,
                                    And(
                                        Hour_Ending <= DateAdd(varEndDate, 23, TimeUnit.Hours),
                                        Hour_Starting >= DateAdd(varStartDate, -1, TimeUnit.Hours)                        
                                    )
                                ),
                                Hour_Ending,
                                SortOrder.Ascending
                            )
                        );

                        Set(varLoading,{Visible: true, Value: 30, Text: "Collecting Production Dataset 2"});
                        Collect(material_2,
                            Sort(
                                Filter(Production,
                                    And(
                                        Hour_Ending <= DateAdd(varEndDate, 23, TimeUnit.Hours),
                                        Hour_Starting >= DateAdd(varStartDate, -1, TimeUnit.Hours)                        
                                    )
                                ),
                                Hour_Ending,
                                SortOrder.Descending
                            )
                        );

                        Set(varLoading,{Visible: true, Value: 40, Text: "Joining Production Data 1"});
                        ClearCollect(fusion, material_1);

                        Set(varLoading,{Visible: true, Value: 50, Text: "Joining Production Data 2"});
                        Collect(fusion,
                            Filter(material_2, Not(ID in material_1.ID))
                        );

                        Set(varLoading,{Visible: true, Value: 60, Text: "Collecting Joined Production Data"});
                        ClearCollect(
                            collectProduction,
                            ForAll(
                                fusion,
                                {
                                    id: Value(ThisRecord.ID),
                                    shift: Text(ThisRecord.Shift_Letter),
                                    line: Text(ThisRecord.Line.Value),
                                    lot: Text(ThisRecord.Lot),
                                    catalog: Text(ThisRecord.Catalog),
                                    size: Text(ThisRecord.Size),
                                    hour_ending: DateTimeValue(ThisRecord.Hour_Ending),
                                    hour_starting: DateTimeValue(ThisRecord.Hour_Starting),
                                    goal: Value(ThisRecord.Hourly_Goal),
                                    amount_built: Value(ThisRecord.Amount_Built),
                                    unit_starting: Value(ThisRecord.Unit_Starting),
                                    unit_ending: Value(ThisRecord.Unit_Ending),
                                    reject_labels: Value(ThisRecord.Reject_Labels),
                                    reject_cartridges: Value(ThisRecord.Reject_Cartridges),
                                    reject_units: Value(ThisRecord.Reject_Units),
                                    qa_units: Value(ThisRecord.QA_Units)
                                }
                            )
                        );

                        Set(varLoading,{Visible: true, Value: 65, Text: "Garbage Collection"});
                        Clear(fusion);
                        Clear(material_1);
                        Clear(material_2);
                    )
                );

                /*Collect Downtime*/
                Set(varLoading,{Visible: true, Value: 70, Text: "Collecting Downtime Data"});
                If(varUpdateDowntime,
                    If(
                        DateDiff( varStartDate, varEndDate, TimeUnit.Days) <= 14,
                        Set(varLoading,{Visible: true, Value: 95, Text: "Retrieving Downtime Data"});
                        ClearCollect(collectDowntime,
                            ForAll(
                                Filter(Downtime,
                                    Ended <= DateAdd(varEndDate, 23, TimeUnit.Hours),
                                    Started >= DateAdd(varStartDate, -1, TimeUnit.Hours)
                                ),
                                {
                                    id: Value(ThisRecord.ID),
                                    shift: Text(ThisRecord.Shift_Letter),
                                    line: Text(ThisRecord.Line.Value),
                                    lot: Text(ThisRecord.Lot),
                                    catalog: Text(ThisRecord.Catalog),
                                    size: Text(ThisRecord.Size),
                                    started: DateTimeValue(ThisRecord.Started),
                                    ended: DateTimeValue(ThisRecord.Ended),
                                    reason: Text(ThisRecord.Reason.Value),
                                    total: Value(ThisRecord.Total_Downtime),
                                    comments: Text(ThisRecord.Comments)
                                }
                            )
                        ),

                        DateDiff( varStartDate, varEndDate, TimeUnit.Days) > 21,
                        Set(varLoading,{Visible: true, Value: 95, Text: "Parsing PowerAutomate Flow for Downtime Data"});
                        ClearCollect(collectDowntime,
                            ForAll(
                                Table(
                                    ParseJSON(
                                        flow_get_downtime_range_v2.Run(
                                            Text("All"),
                                            Text(DateAdd(varEndDate, 23,TimeUnit.Hours), "yyyy-mm-dd"),
                                            Text(DateAdd(varStartDate, -1, TimeUnit.Hours), "yyyy-mm-dd")
                                        ).output
                                    )
                                ),
                                {
                                    id: Value(Value._ID),
                                    shift: Text(Value._shift),
                                    line: Text(Value._line),
                                    lot: Text(Value._lot),
                                    catalog: Text(Value._catalog),
                                    size: Text(Value._size),
                                    started: DateTimeValue(Value._started),
                                    ended: DateTimeValue(Value._ended),
                                    reason: Text(Value._reason),
                                    total: Value(Value._total),
                                    comments: Text(Value._comments)
                                }
                            )
                        ),

                        DateDiff( varStartDate, varEndDate, TimeUnit.Days) <= 21,
                        Set(varLoading,{Visible: true, Value: 75, Text: "Collecting Downtime Dataset 2"});
                        Collect(material_1,
                            Sort(
                                Filter(Downtime,
                                    And(
                                        Ended <= DateAdd(varEndDate, 23, TimeUnit.Hours),
                                        Started >= DateAdd(varStartDate, -1, TimeUnit.Hours)
                                    )
                                ),
                                Ended,
                                SortOrder.Ascending
                            )
                        );

                        Set(varLoading,{Visible: true, Value: 80, Text: "Collecting Downtime Dataset 2"});
                        Collect(material_2,
                            Sort(
                                Filter(Downtime,
                                    And(
                                        Ended <= DateAdd(varEndDate, 23, TimeUnit.Hours),
                                        Started >= DateAdd(varStartDate, -1, TimeUnit.Hours)                        
                                    )
                                ),
                                Ended,
                                SortOrder.Descending
                            )
                        );

                        Set(varLoading,{Visible: true, Value: 85, Text: "Joining Downtime Dataset 1"});
                        ClearCollect(fusion, material_1);

                        Set(varLoading,{Visible: true, Value: 90, Text: "Joining Downtime Dataset 2"});
                        Collect(fusion,
                            Filter(material_2, Not(ID in material_1.ID))
                        );

                        Set(varLoading,{Visible: true, Value: 95, Text: "Collecting Joined Downtime Data"});
                        ClearCollect(
                            collectDowntime,
                            ForAll(
                                fusion,
                                {
                                    id: Value(ThisRecord.ID),
                                    shift: Text(ThisRecord.Shift_Letter),
                                    line: Text(ThisRecord.Line.Value),
                                    lot: Text(ThisRecord.Lot),
                                    catalog: Text(ThisRecord.Catalog),
                                    size: Text(ThisRecord.Size),
                                    started: DateTimeValue(ThisRecord.Started),
                                    ended: DateTimeValue(ThisRecord.Ended),
                                    reason: Text(ThisRecord.Reason.Value),
                                    total: Value(ThisRecord.Total_Downtime),
                                    comments: Text(ThisRecord.Comments)
                                }
                            )
                        );

                        Set(varLoading,{Visible: true, Value: 98, Text: "Garbage Collection"});
                        Clear(fusion);
                        Clear(material_1);
                        Clear(material_2);
                    )
                );

                Set(varLoading,{Visible: true, Value: 100, Text: "Finshing up"});

                /*Update the UI Elements*/
                Select(c_collect_lists);
              Text: ="collect"
              Visible: =false
              X: =20
              Y: =20
        - c_collect_lists:
            Control: Classic/Button
            Properties:
              OnSelect: |-
                =Set(varLoading,{Visible: true, Value: 1, Text: "Loading"});

                Set(varLoading,{Visible: true, Value: 33, Text: "Finding Product Sizes"});
                /*Gather production size by line*/
                ClearCollect(
                    collectTempProduction,
                    GroupBy(
                        Filter(
                            collectProduction,
                            hour_starting >= DateAdd(c_start_date.SelectedDate, -1, TimeUnit.Hours),
                            hour_ending <= DateAdd(c_end_date.SelectedDate, 23, TimeUnit.Hours),
                            If(
                                c_shift.Selected.Value = "All",
                                shift = shift,
                                shift = c_shift.Selected.Value
                            )
                        ),            
                        size,
                        line_group
                    )
                );

                Set(varLoading,{Visible: true, Value: 66, Text: "Creating Product Size List"});
                /*Init size list collection*/
                Clear(collectSizeList);
                Collect(collectSizeList, {Size: "All", Line: []});
                /*Create a size list from production*/
                ForAll(
                    collectTempProduction,
                    Collect(
                        collectSizeList,
                        {
                            Size: size,
                            Line: line_group.line
                        }
                    )
                );

                /*Clear for garbage collection*/
                Set(varLoading,{Visible: true, Value: 90, Text: "Garbage Collection"});

                Clear(collectTempProduction);

                Set(varLoading,{Visible: true, Value: 95, Text: "Finishing Up"});

                Select(c_update);
              Text: ="collect lists"
              Visible: =false
              X: =20
              Y: =20
        - c_logo:
            Control: Image
            Properties:
              Image: =LOGO_MSIG_SBlue_FIT_ALPHA
              FillPortions: =1
              LayoutMinHeight: =1
              LayoutMinWidth: =1
              Width: =10
        - c_h_title:
            Control: Label
            Properties:
              Text: ="Encapsualtion Daily Managmenet System"
              Align: =Align.Center
              Color: =varColor5
              FillPortions: =6
              LayoutMinHeight: =1
              LayoutMinWidth: =1
              Size: =Self.Height / 2
        - c_h_nav:
            Control: GroupContainer
            Variant: horizontalAutoLayoutContainer
            Properties:
              AlignInContainer: =AlignInContainer.SetByContainer
              DropShadow: =DropShadow.None
              LayoutAlignItems: =LayoutAlignItems.Stretch
              LayoutGap: =varPadding
              LayoutJustifyContent: =LayoutJustifyContent.Center
              LayoutMinHeight: =1
              LayoutMinWidth: =10
              LayoutMode: =LayoutMode.Auto
              RadiusBottomLeft: =0
              RadiusBottomRight: =0
              RadiusTopLeft: =0
              RadiusTopRight: =0
              Width: =c_h_n_reload.Width * 3 + varPadding * 4
            Children:
            - c_h_n_reload:
                Control: Image
                Properties:
                  OnSelect: =
                  Image: =gblAppIcons.Reload
                  Height: =Parent.Height * 0.75
                  HoverBorderColor: =ColorFade(varColorYes, 20%)
                  HoverFill: =ColorFade(varColorAccent, 75%)
                  LayoutMinHeight: =1
                  LayoutMinWidth: =10
                  RadiusBottomLeft: =Self.Width/2
                  RadiusBottomRight: =Self.Width/2
                  RadiusTopLeft: =Self.Width/2
                  RadiusTopRight: =Self.Width/2
                  Width: =Self.Height
                  X: =c_h_n_settings.X - Self.Width - Parent.Width * 0.015
                  Y: =Parent.Height/2 - Self.Height/2
            - c_h_n_bugs:
                Control: Image
                Properties:
                  OnSelect: =Navigate(Bugs)
                  Image: =gblAppIcons.Bug
                  Height: =Parent.Height * 0.75
                  HoverBorderColor: =ColorFade(varColorYes, 20%)
                  HoverFill: =ColorFade(varColorAccent, 75%)
                  LayoutMinHeight: =1
                  LayoutMinWidth: =10
                  RadiusBottomLeft: =Self.Width/2
                  RadiusBottomRight: =Self.Width/2
                  RadiusTopLeft: =Self.Width/2
                  RadiusTopRight: =Self.Width/2
                  Width: =Self.Height
                  X: =Parent.Width * 0.99 - Self.Width
                  Y: =Parent.Height/2 - Self.Height/2
            - c_h_n_settings:
                Control: Image
                Properties:
                  OnSelect: =Navigate(Settings)
                  Image: =gblAppIcons.Settings
                  Height: =Parent.Height * 0.75
                  HoverBorderColor: =ColorFade(varColorYes, 20%)
                  HoverFill: =ColorFade(varColorAccent, 75%)
                  LayoutMinHeight: =1
                  LayoutMinWidth: =10
                  RadiusBottomLeft: =Self.Width/2
                  RadiusBottomRight: =Self.Width/2
                  RadiusTopLeft: =Self.Width/2
                  RadiusTopRight: =Self.Width/2
                  Width: =Self.Height
                  X: =Parent.Width * 0.99 - Self.Width - c_h_n_bugs.Width - Parent.Width * 0.015
                  Y: =Parent.Height/2 - Self.Height/2
            - c_h_n_user:
                Control: Image
                Properties:
                  Image: |
                    =If(IsBlankOrError(User().Image), gblAppIcons.Employee, User().Image)
                  LayoutMinHeight: =1
                  LayoutMinWidth: =1
                  RadiusBottomLeft: =Self.Height / 2
                  RadiusBottomRight: =Self.Height / 2
                  RadiusTopLeft: =Self.Height / 2
                  RadiusTopRight: =Self.Height / 2
                  Width: =Self.Height
    - c_body:
        Control: GroupContainer
        Variant: horizontalAutoLayoutContainer
        Properties:
          AlignInContainer: =AlignInContainer.SetByContainer
          DropShadow: =DropShadow.None
          FillPortions: =15
          LayoutAlignItems: =LayoutAlignItems.Stretch
          LayoutMinHeight: =10
          LayoutMinWidth: =10
          LayoutMode: =LayoutMode.Auto
          RadiusBottomLeft: =0
          RadiusBottomRight: =0
          RadiusTopLeft: =0
          RadiusTopRight: =0
        Children:
        - c_nav:
            Control: GroupContainer
            Variant: horizontalAutoLayoutContainer
            Properties:
              AlignInContainer: =AlignInContainer.SetByContainer
              DropShadow: =DropShadow.None
              Fill: =varColor3
              LayoutAlignItems: =LayoutAlignItems.Stretch
              LayoutDirection: =LayoutDirection.Vertical
              LayoutGap: =varPadding
              LayoutMinHeight: =10
              LayoutMinWidth: =10
              LayoutMode: =LayoutMode.Auto
              PaddingBottom: =varPadding
              PaddingLeft: =varPadding
              PaddingRight: =varPadding
              PaddingTop: =varPadding
              RadiusBottomLeft: =0
              RadiusBottomRight: =0
              RadiusTopLeft: =0
              RadiusTopRight: =0
            Children:
            - c_n_title:
                Control: Text
                Properties:
                  Align: ='TextCanvas.Align'.Center
                  Size: =Self.Height / 3
                  Text: ="Catalog Analysis"
                  VerticalAlign: ='TextCanvas.VerticalAlign'.Middle
                  Weight: ='TextCanvas.Weight'.Semibold
                  FillPortions: =1
            - c_n_seperator:
                Control: Rectangle
                Properties:
                  Height: =1
                  Width: =Parent.Width * 0.95
            - c_n_gallery:
                Control: Gallery
                Variant: galleryVertical
                Properties:
                  Items: =collectNavigation
                  DelayItemLoading: =true
                  FillPortions: =13
                  Layout: =Layout.Vertical
                  LayoutMinHeight: =1
                  LayoutMinWidth: =1
                  LoadingSpinner: =LoadingSpinner.Data
                  ShowScrollbar: =false
                  TemplatePadding: =0
                  TemplateSize: =IfError((Self.Height - ((Self.AllItemsCount+1) * Self.TemplatePadding)) / Self.AllItemsCount,0)
                Children:
                - c_n_button:
                    Control: Classic/Button
                    Properties:
                      OnSelect: =Navigate(ThisItem.ScreenName);
                      Text: =ThisItem.Title
                      Color: =varColor0
                      DisplayMode: =If(App.ActiveScreen = ThisItem.ScreenName, DisplayMode.Disabled, DisplayMode.Edit)
                      Fill: =varColorAccent
                      FontWeight: =FontWeight.Normal
                      Height: =Parent.TemplateHeight - varPadding
                      Size: =Self.Width / 16
                      Width: =Parent.TemplateWidth - Self.BorderThickness
                      X: =Center(Parent.TemplateWidth, Self.Width)
                      Y: =Center(Parent.TemplateHeight, Self.Height)
            - c_n_footer:
                Control: GroupContainer
                Variant: manualLayoutContainer
                Properties:
                  AlignInContainer: =AlignInContainer.SetByContainer
                  DropShadow: =DropShadow.None
                  FillPortions: =2
                  LayoutMinHeight: =1
                  LayoutMinWidth: =1
                  RadiusBottomLeft: =0
                  RadiusBottomRight: =0
                  RadiusTopLeft: =0
                  RadiusTopRight: =0
                Children:
                - c_n_f_text:
                    Control: Text
                    Properties:
                      Align: ='TextCanvas.Align'.Center
                      Size: =8
                      Text: ="MilliporeSigma is the U.S. and Canada Life Science business of Merck KGaA, Darmstadt, Germany."
                      VerticalAlign: ='TextCanvas.VerticalAlign'.Bottom
                      Height: =Parent.Height
                      Width: =Parent.Width
        - c_main:
            Control: GroupContainer
            Variant: horizontalAutoLayoutContainer
            Properties:
              AlignInContainer: =AlignInContainer.SetByContainer
              DropShadow: =DropShadow.None
              FillPortions: =11
              LayoutAlignItems: =LayoutAlignItems.Stretch
              LayoutGap: =varPadding
              LayoutMinHeight: =10
              LayoutMinWidth: =10
              LayoutMode: =LayoutMode.Auto
              PaddingBottom: =varPadding
              PaddingLeft: =varPadding
              PaddingRight: =varPadding
              PaddingTop: =varPadding
              RadiusBottomLeft: =0
              RadiusBottomRight: =0
              RadiusTopLeft: =0
              RadiusTopRight: =0
            Children:
            - c_controls:
                Control: GroupContainer
                Variant: horizontalAutoLayoutContainer
                Properties:
                  AlignInContainer: =AlignInContainer.SetByContainer
                  Fill: =varColor4
                  LayoutAlignItems: =LayoutAlignItems.Stretch
                  LayoutDirection: =LayoutDirection.Vertical
                  LayoutGap: =varPadding
                  LayoutMinHeight: =10
                  LayoutMinWidth: =10
                  LayoutMode: =LayoutMode.Auto
                  PaddingBottom: =varPadding
                  PaddingLeft: =varPadding
                  PaddingRight: =varPadding
                  PaddingTop: =varPadding
                Children:
                - c_start_date_title:
                    Control: Text
                    Properties:
                      Align: ='TextCanvas.Align'.Center
                      Size: =Self.Height / 3
                      Text: ="Starting Date"
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - c_start_date:
                    Control: DatePicker
                    Properties:
                      FontSize: =Self.Width / 10
                      Format: ="Short"
                      SelectedDate: =varNowDay
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - c_seperator_0:
                    Control: Rectangle
                    Properties:
                      Height: =1
                      LayoutMinWidth: =10
                - c_end_date_title:
                    Control: Text
                    Properties:
                      Align: ='TextCanvas.Align'.Center
                      Size: =Self.Height / 3
                      Text: ="Ending Date"
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - c_end_date:
                    Control: DatePicker
                    Properties:
                      FontSize: =Self.Width / 10
                      Format: ="Short"
                      SelectedDate: =varNowDay
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - c_seperator_1:
                    Control: Rectangle
                    Properties:
                      Height: =1
                      LayoutMinWidth: =10
                - c_button:
                    Control: Classic/Button
                    Properties:
                      OnSelect: =Select(c_collect);
                      Text: ="Update Date Range"
                      Color: =varColor0
                      Fill: =varColorAccent
                      FillPortions: =1
                      FontWeight: =FontWeight.Normal
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                      Size: =Self.Width / 16
                - c_seperator_2:
                    Control: Rectangle
                    Properties:
                      Height: =1
                      LayoutMinWidth: =10
                - c_size_title:
                    Control: Text
                    Properties:
                      Align: ='TextCanvas.Align'.Center
                      Size: =Self.Height / 3
                      Text: ="Product Size"
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - c_size:
                    Control: DropDown
                    Variant: pcfdataset
                    Properties:
                      OnChange: =Select(c_update);
                      Appearance: ='DropdownCanvas.Appearance'.FilledDarker
                      FontSize: =Self.Width / 10
                      Items: =Sort(ShowColumns(collectSizeList,Size),Size,SortOrder.Descending)
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                    Children:
                    - Size1:
                        Control: PowerApps_CoreControls_DropdownCanvasTemplate_dataField
                        Variant: textualColumn
                        Properties:
                          FieldDisplayName: ="Size"
                          FieldName: ="Size"
                          FieldType: ="s"
                          Order: =1
                - c_seperator_3:
                    Control: Rectangle
                    Properties:
                      Height: =1
                      LayoutMinWidth: =10
                - c_shift_title:
                    Control: Text
                    Properties:
                      Align: ='TextCanvas.Align'.Center
                      Size: =Self.Height / 3
                      Text: ="Shift"
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - c_shift:
                    Control: DropDown
                    Variant: pcfdataset
                    Properties:
                      OnChange: =Select(c_collect_lists);
                      Appearance: ='DropdownCanvas.Appearance'.FilledDarker
                      DefaultSelectedItems: |-
                        ={Value: "All"}
                      FontSize: =Self.Width / 10
                      Items: =["All", "C", "A", "B"]
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - c_seperator_4:
                    Control: Rectangle
                    Properties:
                      Height: =1
                      LayoutMinWidth: =10
                - c_c_footer:
                    Control: GroupContainer
                    Variant: manualLayoutContainer
                    Properties:
                      AlignInContainer: =AlignInContainer.SetByContainer
                      DropShadow: =DropShadow.None
                      FillPortions: =10
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                      RadiusBottomLeft: =0
                      RadiusBottomRight: =0
                      RadiusTopLeft: =0
                      RadiusTopRight: =0
            - c_section:
                Control: GroupContainer
                Variant: verticalAutoLayoutContainer
                Properties:
                  AlignInContainer: =AlignInContainer.SetByContainer
                  DropShadow: =DropShadow.None
                  FillPortions: =9
                  LayoutGap: =varPadding
                  LayoutMinHeight: =10
                  LayoutMinWidth: =10
                  LayoutMode: =LayoutMode.Auto
                  RadiusBottomLeft: =0
                  RadiusBottomRight: =0
                  RadiusTopLeft: =0
                  RadiusTopRight: =0
                Children:
                - c_oee_parent:
                    Control: GroupContainer
                    Variant: verticalAutoLayoutContainer
                    Properties:
                      AlignInContainer: =AlignInContainer.Center
                      Height: =Self.Width * 2
                      LayoutAlignItems: =LayoutAlignItems.Stretch
                      LayoutDirection: =LayoutDirection.Vertical
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                      LayoutMode: =LayoutMode.Auto
                      Width: =c_g_oee_parent.Width
                    Children:
                    - c_oee_title:
                        Control: Label
                        Properties:
                          Text: ="Average OEE2"
                          Align: =Align.Center
                          Color: =varColor5
                          Fill: =varColor2
                          FillPortions: =1
                          Font: =Font.Verdana
                          LayoutMinHeight: =10
                          LayoutMinWidth: =10
                          Size: =Self.Height / 4
                    - c_oee:
                        Control: Image
                        Properties:
                          Image: |-
                            ="https://quickchart.io/chart?width=" &Self.Width& "&height=" &Self.Height*0.90& "&c=" & 
                            EncodeUrl(
                            "{
                              type: 'radialGauge',
                              data: {
                                datasets: [{
                                  data: ["& Last(collectOEE2).TestOEE2 &"],
                                  backgroundColor: getGradientFillHelper('horizontal', ['blue', 'red']),
                                }]
                              },
                              options: {
                                domain: [0, "& If(Last(collectOEE2).TestOEE2 <= 100, 100, Last(collectOEE2).TestOEE2) &"],
                                trackColor: 'lightgray', 
                                centerPercentage: 90,
                                centerArea: {
                                  text: (val) => val + '%',
                                },
                              }
                            }"
                            )
                          FillPortions: =4
                          LayoutMinHeight: =10
                          LayoutMinWidth: =10
                    - c_oee_data:
                        Control: GroupContainer
                        Variant: horizontalAutoLayoutContainer
                        Properties:
                          AlignInContainer: =AlignInContainer.SetByContainer
                          DropShadow: =DropShadow.None
                          FillPortions: =2
                          LayoutAlignItems: =LayoutAlignItems.Stretch
                          LayoutGap: =varPadding/2
                          LayoutMinHeight: =10
                          LayoutMinWidth: =10
                          LayoutMode: =LayoutMode.Auto
                          PaddingBottom: =Self.LayoutGap
                          PaddingLeft: =Self.LayoutGap
                          PaddingRight: =Self.LayoutGap
                          PaddingTop: =Self.LayoutGap
                        Children:
                        - c_oee_built_parent:
                            Control: GroupContainer
                            Variant: verticalAutoLayoutContainer
                            Properties:
                              AlignInContainer: =AlignInContainer.SetByContainer
                              LayoutAlignItems: =LayoutAlignItems.Stretch
                              LayoutDirection: =LayoutDirection.Vertical
                              LayoutMinHeight: =10
                              LayoutMinWidth: =10
                              LayoutMode: =LayoutMode.Auto
                            Children:
                            - c_oee_built_title:
                                Control: Label
                                Properties:
                                  Text: ="Units Built"
                                  Align: =Align.Center
                                  Color: =varColor5
                                  Fill: =varColor3
                                  FillPortions: =1
                                  Font: =Font.Verdana
                                  LayoutMinHeight: =10
                                  LayoutMinWidth: =10
                                  Size: =Self.Height / 6
                                  Width: =10
                            - c_oee_built:
                                Control: Label
                                Properties:
                                  Text: =First(collectOEE2).output*1
                                  Align: =Align.Center
                                  FillPortions: =1
                                  Font: =Font.Verdana
                                  LayoutMinHeight: =10
                                  LayoutMinWidth: =10
                                  Size: =Self.Height / 6
                                  Width: =10
                        - c_oee_goal_parent:
                            Control: GroupContainer
                            Variant: verticalAutoLayoutContainer
                            Properties:
                              AlignInContainer: =AlignInContainer.SetByContainer
                              LayoutAlignItems: =LayoutAlignItems.Stretch
                              LayoutDirection: =LayoutDirection.Vertical
                              LayoutMinHeight: =10
                              LayoutMinWidth: =10
                              LayoutMode: =LayoutMode.Auto
                            Children:
                            - c_oee_goal_title:
                                Control: Label
                                Properties:
                                  Text: ="Build Goal"
                                  Align: =Align.Center
                                  Color: =varColor5
                                  Fill: =varColor3
                                  FillPortions: =1
                                  Font: =Font.Verdana
                                  LayoutMinHeight: =10
                                  LayoutMinWidth: =10
                                  Size: =Self.Height / 6
                                  Width: =10
                            - c_oee_goal:
                                Control: Label
                                Properties:
                                  Text: =Round(First(collectOEE2).constraint_goal,0)
                                  Align: =Align.Center
                                  FillPortions: =1
                                  Font: =Font.Verdana
                                  LayoutMinHeight: =10
                                  LayoutMinWidth: =10
                                  Size: =Self.Height / 6
                                  Width: =10
                        - c_oee_constraint_parent:
                            Control: GroupContainer
                            Variant: verticalAutoLayoutContainer
                            Properties:
                              AlignInContainer: =AlignInContainer.SetByContainer
                              LayoutAlignItems: =LayoutAlignItems.Stretch
                              LayoutDirection: =LayoutDirection.Vertical
                              LayoutMinHeight: =10
                              LayoutMinWidth: =10
                              LayoutMode: =LayoutMode.Auto
                            Children:
                            - c_oee_constraint_title:
                                Control: Label
                                Properties:
                                  Text: ="Average Target"
                                  Align: =Align.Center
                                  Color: =varColor5
                                  Fill: =varColor3
                                  FillPortions: =1
                                  Font: =Font.Verdana
                                  LayoutMinHeight: =10
                                  LayoutMinWidth: =10
                                  Size: =Self.Height / 6
                                  Width: =10
                            - c_oee_constraint:
                                Control: Label
                                Properties:
                                  Text: =First(collectOEE2).constraint_average
                                  Align: =Align.Center
                                  FillPortions: =1
                                  Font: =Font.Verdana
                                  LayoutMinHeight: =10
                                  LayoutMinWidth: =10
                                  Size: =Self.Height / 6
                                  Width: =10
                - c_gallery:
                    Control: Gallery
                    Variant: BrowseLayout_Horizontal_TwoTextOneImageVariant_ver5.0
                    Properties:
                      Items: =["SSC","XL1","SSC2","XL2","XLT","XL3","XLT2","XL4","XLT3","XL5"]
                      WrapCount: =2
                      AlignInContainer: =AlignInContainer.SetByContainer
                      DelayItemLoading: =true
                      FillPortions: =5
                      Height: =Parent.Height
                      LayoutMinWidth: =10
                      LoadingSpinner: =LoadingSpinner.Data
                      TemplatePadding: =0
                      TemplateSize: =Self.Width / 5
                      Width: =Parent.Width * 0.90
                    Children:
                    - c_g_layout:
                        Control: GroupContainer
                        Variant: manualLayoutContainer
                        Properties:
                          DropShadow: =DropShadow.None
                          Height: =Parent.TemplateHeight
                          PaddingBottom: =varPadding
                          PaddingLeft: =varPadding
                          PaddingRight: =varPadding
                          RadiusBottomLeft: =0
                          RadiusBottomRight: =0
                          RadiusTopLeft: =0
                          RadiusTopRight: =0
                          Width: =Parent.TemplateWidth
                        Children:
                        - c_g_oee_parent:
                            Control: GroupContainer
                            Variant: verticalAutoLayoutContainer
                            Properties:
                              DropShadow: =DropShadow.Semilight
                              Height: =Parent.Height - varPadding/2
                              LayoutAlignItems: =LayoutAlignItems.Stretch
                              LayoutDirection: =LayoutDirection.Vertical
                              LayoutGap: =Parent.Width * 0.005
                              LayoutMode: =LayoutMode.Auto
                              Width: =Parent.Width - varPadding/2
                              X: =Center(Parent.Width,Self.Width)
                            Children:
                            - c_g_oee_line:
                                Control: Label
                                Properties:
                                  Text: =ThisItem.Value
                                  Align: =Align.Center
                                  Color: =varColor5
                                  Fill: =varColor2
                                  FillPortions: =1
                                  Font: =Font.Verdana
                                  LayoutMinHeight: =10
                                  LayoutMinWidth: =10
                                  Size: =Self.Height / 3
                            - c_g_oee_graph:
                                Control: Image
                                Properties:
                                  Image: |-
                                    ="https://quickchart.io/chart?width=" &Self.Width& "&height=" &Self.Height*0.90& "&c=" & 
                                    EncodeUrl(
                                    "{
                                      type: 'radialGauge',
                                      data: {
                                        datasets: [{
                                          data: ["& LookUp(collectLineOEE, line = c_g_oee_line.Text).OEE2 &"],
                                          backgroundColor: getGradientFillHelper('horizontal', ['blue', 'red']),
                                        }]
                                      },
                                      options: {
                                        domain: [0, "& If(LookUp(collectLineOEE, line = c_g_oee_line.Text).OEE2 <= 100, 100, LookUp(collectLineOEE, line = c_g_oee_line.Text).OEE2) &"],
                                        trackColor: 'lightgray', 
                                        centerPercentage: 90,
                                        centerArea: {
                                          text: (val) => val + '%',
                                        },
                                      }
                                    }"
                                    )
                                  FillPortions: =3
                                  LayoutMinHeight: =10
                                  LayoutMinWidth: =10
                            - c_g_oee_data:
                                Control: GroupContainer
                                Variant: verticalAutoLayoutContainer
                                Properties:
                                  AlignInContainer: =AlignInContainer.SetByContainer
                                  DropShadow: =DropShadow.None
                                  FillPortions: =4
                                  LayoutAlignItems: =LayoutAlignItems.Stretch
                                  LayoutDirection: =LayoutDirection.Vertical
                                  LayoutMinHeight: =10
                                  LayoutMinWidth: =10
                                  LayoutMode: =LayoutMode.Auto
                                  RadiusBottomLeft: =0
                                  RadiusBottomRight: =0
                                  RadiusTopLeft: =0
                                  RadiusTopRight: =0
                                Children:
                                - c_g_oee_d_top:
                                    Control: GroupContainer
                                    Variant: horizontalAutoLayoutContainer
                                    Properties:
                                      AlignInContainer: =AlignInContainer.SetByContainer
                                      DropShadow: =DropShadow.None
                                      LayoutAlignItems: =LayoutAlignItems.Stretch
                                      LayoutGap: =varPadding/2
                                      LayoutMinHeight: =10
                                      LayoutMinWidth: =10
                                      LayoutMode: =LayoutMode.Auto
                                      PaddingBottom: =Self.LayoutGap
                                    Children:
                                    - c_g_oee_built_parent:
                                        Control: GroupContainer
                                        Variant: verticalAutoLayoutContainer
                                        Properties:
                                          AlignInContainer: =AlignInContainer.SetByContainer
                                          LayoutAlignItems: =LayoutAlignItems.Stretch
                                          LayoutDirection: =LayoutDirection.Vertical
                                          LayoutMinHeight: =10
                                          LayoutMinWidth: =10
                                          LayoutMode: =LayoutMode.Auto
                                        Children:
                                        - c_g_oee_built_title:
                                            Control: Label
                                            Properties:
                                              Text: ="Units Built"
                                              Align: =Align.Center
                                              Color: =varColor5
                                              Fill: =varColor3
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 5
                                              Width: =10
                                        - c_g_oee_built:
                                            Control: Label
                                            Properties:
                                              Text: =LookUp(collectLineOEE, line = c_g_oee_line.Text).output*1
                                              Align: =Align.Center
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 4
                                              Width: =10
                                    - c_g_oee_goal_parent:
                                        Control: GroupContainer
                                        Variant: verticalAutoLayoutContainer
                                        Properties:
                                          AlignInContainer: =AlignInContainer.SetByContainer
                                          LayoutAlignItems: =LayoutAlignItems.Stretch
                                          LayoutDirection: =LayoutDirection.Vertical
                                          LayoutMinHeight: =10
                                          LayoutMinWidth: =10
                                          LayoutMode: =LayoutMode.Auto
                                        Children:
                                        - c_g_oee_goal_title:
                                            Control: Label
                                            Properties:
                                              Text: ="Build Goal"
                                              Align: =Align.Center
                                              Color: =varColor5
                                              Fill: =varColor3
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 5
                                              Width: =10
                                        - c_g_oee_goal:
                                            Control: Label
                                            Properties:
                                              Text: =LookUp(collectLineOEE, line = c_g_oee_line.Text).constraint_total
                                              Align: =Align.Center
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 4
                                              Width: =10
                                    - c_g_oee_constraint_parent:
                                        Control: GroupContainer
                                        Variant: verticalAutoLayoutContainer
                                        Properties:
                                          AlignInContainer: =AlignInContainer.SetByContainer
                                          LayoutAlignItems: =LayoutAlignItems.Stretch
                                          LayoutDirection: =LayoutDirection.Vertical
                                          LayoutMinHeight: =10
                                          LayoutMinWidth: =10
                                          LayoutMode: =LayoutMode.Auto
                                        Children:
                                        - c_g_oee_constraint_title:
                                            Control: Label
                                            Properties:
                                              Text: ="Hourly Target"
                                              Align: =Align.Center
                                              Color: =varColor5
                                              Fill: =varColor3
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 5.5
                                              Width: =10
                                        - c_g_oee_constraint:
                                            Control: Label
                                            Properties:
                                              Text: =LookUp(collectLineOEE, line = c_g_oee_line.Text).constraint_average
                                              Align: =Align.Center
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 4
                                              Width: =10
                                - c_g_oee_d_bottom:
                                    Control: GroupContainer
                                    Variant: horizontalAutoLayoutContainer
                                    Properties:
                                      AlignInContainer: =AlignInContainer.SetByContainer
                                      DropShadow: =DropShadow.None
                                      LayoutAlignItems: =LayoutAlignItems.Stretch
                                      LayoutGap: =varPadding/2
                                      LayoutMinHeight: =10
                                      LayoutMinWidth: =10
                                      LayoutMode: =LayoutMode.Auto
                                      PaddingBottom: =Self.LayoutGap
                                    Children:
                                    - c_g_oee_runtime_parent:
                                        Control: GroupContainer
                                        Variant: verticalAutoLayoutContainer
                                        Properties:
                                          AlignInContainer: =AlignInContainer.SetByContainer
                                          LayoutAlignItems: =LayoutAlignItems.Stretch
                                          LayoutDirection: =LayoutDirection.Vertical
                                          LayoutMinHeight: =10
                                          LayoutMinWidth: =10
                                          LayoutMode: =LayoutMode.Auto
                                        Children:
                                        - c_g_oee_runtime_title:
                                            Control: Label
                                            Properties:
                                              Text: ="Runtime"
                                              Align: =Align.Center
                                              Color: =varColor5
                                              Fill: =varColor3
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 5
                                              Width: =10
                                        - c_g_oee_runtime:
                                            Control: Label
                                            Properties:
                                              Text: =RoundDown(LookUp(collectLineOEE, line = c_g_oee_line.Text).runtime_hours,0) &"H "& Mod(LookUp(collectLineOEE, line = c_g_oee_line.Text).runtime_hours*60,60) & "m"
                                              Align: =Align.Center
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 4
                                              Width: =10
                                    - c_g_oee_downtime_parent:
                                        Control: GroupContainer
                                        Variant: verticalAutoLayoutContainer
                                        Properties:
                                          AlignInContainer: =AlignInContainer.SetByContainer
                                          LayoutAlignItems: =LayoutAlignItems.Stretch
                                          LayoutDirection: =LayoutDirection.Vertical
                                          LayoutMinHeight: =10
                                          LayoutMinWidth: =10
                                          LayoutMode: =LayoutMode.Auto
                                        Children:
                                        - c_g_oee_downtime_title:
                                            Control: Label
                                            Properties:
                                              Text: ="Planned Downtime"
                                              Align: =Align.Center
                                              Color: =varColor5
                                              Fill: =varColor3
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 5.5
                                              Width: =10
                                        - c_g_oee_downtime:
                                            Control: Label
                                            Properties:
                                              Text: =RoundDown(LookUp(collectLineOEE, line = c_g_oee_line.Text).downtime_planned/60,0) &"H "& Mod(LookUp(collectLineOEE, line = c_g_oee_line.Text).downtime_planned,60) & "m"
                                              Align: =Align.Center
                                              FillPortions: =1
                                              Font: =Font.Verdana
                                              LayoutMinHeight: =10
                                              LayoutMinWidth: =10
                                              Size: =Self.Height / 3.5
                                              Width: =10
