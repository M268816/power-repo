- t_layout:
    Control: GroupContainer
    Variant: verticalAutoLayoutContainer
    Properties:
      DropShadow: =DropShadow.None
      Height: =Parent.Height
      LayoutAlignItems: =LayoutAlignItems.Stretch
      LayoutDirection: =LayoutDirection.Vertical
      LayoutGap: =
      LayoutMode: =LayoutMode.Auto
      RadiusBottomLeft: =0
      RadiusBottomRight: =0
      RadiusTopLeft: =0
      RadiusTopRight: =0
      Width: =Parent.Width
      X: =
    Children:
    - t_header:
        Control: GroupContainer
        Variant: horizontalAutoLayoutContainer
        Properties:
          AlignInContainer: =AlignInContainer.SetByContainer
          DropShadow: =DropShadow.None
          Fill: =varColor1
          LayoutAlignItems: =LayoutAlignItems.Stretch
          LayoutGap: =varPadding
          LayoutMinHeight: =10
          LayoutMinWidth: =10
          LayoutMode: =LayoutMode.Auto
          PaddingBottom: =varPadding
          PaddingLeft: =varPadding
          PaddingRight: =varPadding
          PaddingTop: =varPadding
          RadiusBottomLeft: =0
          RadiusBottomRight: =0
          RadiusTopLeft: =0
          RadiusTopRight: =0
        Children:
        - t_collect:
            Control: Classic/Button
            Properties:
              OnSelect: |-
                =/*Start*/
                Set(varLoading, {Visible: true, Value: 1, Text: "Gathering Dates"});

                /*Select date range of selected week*/
                UpdateContext({
                    locWeek: WeekNum(t_start_date.SelectedDate),

                    locWeekEnd:
                        DateAdd(
                            Date(Year(t_start_date.SelectedDate), 1, 1) + (locWeek-1)*7 - Weekday(Date(Year(t_start_date.SelectedDate), 1, 1)) + 6,
                            23,
                            TimeUnit.Hours
                        ),

                    locWeekStart:
                        DateAdd(
                            Date(Year(t_start_date.SelectedDate), 1, 1) + (locWeek-1)*7 - Weekday(Date(Year(t_start_date.SelectedDate), 1, 1)) + 2,
                            -1,
                            TimeUnit.Hours
                        )
                });

                /*Collect Data from selected date range*/
                Set(varLoading, {Visible: true, Value: 5, Text: "Collecting All Weekly Production Data"});
                ClearCollect(collectProduction,
                    ForAll(
                        Filter(Production,
                            Hour_Ending <= DateAdd(locWeekEnd, 23, TimeUnit.Hours),
                            Hour_Starting >= DateAdd(locWeekStart, -1, TimeUnit.Hours)
                        ),
                        {
                            id: Value(ThisRecord.ID),
                            shift: Text(ThisRecord.Shift_Letter),
                            line: Text(ThisRecord.Line.Value),
                            lot: Text(ThisRecord.Lot),
                            catalog: Text(ThisRecord.Catalog),
                            size: Text(ThisRecord.Size),
                            hour_ending: DateTimeValue(ThisRecord.Hour_Ending),
                            hour_starting: DateTimeValue(ThisRecord.Hour_Starting),
                            goal: Value(ThisRecord.Hourly_Goal),
                            amount_built: Value(ThisRecord.Amount_Built),
                            unit_starting: Value(ThisRecord.Unit_Starting),
                            unit_ending: Value(ThisRecord.Unit_Ending),
                            reject_labels: Value(ThisRecord.Reject_Labels),
                            reject_cartridges: Value(ThisRecord.Reject_Cartridges),
                            reject_units: Value(ThisRecord.Reject_Units),
                            qa_units: Value(ThisRecord.QA_Units)
                        }
                    )
                );

                Set(varLoading, {Visible: true, Value: 10, Text: "Collecting All Weekly Downtime Data"});
                ClearCollect(collectDowntime,
                    ForAll(
                        Filter(Downtime,
                            Ended <= DateAdd(locWeekEnd, 23, TimeUnit.Hours),
                            Started >= DateAdd(locWeekStart, -1, TimeUnit.Hours)
                        ),
                        {
                            id: Value(ThisRecord.ID),
                            shift: Text(ThisRecord.Shift_Letter),
                            line: Text(ThisRecord.Line.Value),
                            lot: Text(ThisRecord.Lot),
                            catalog: Text(ThisRecord.Catalog),
                            size: Text(ThisRecord.Size),
                            started: DateTimeValue(ThisRecord.Started),
                            ended: DateTimeValue(ThisRecord.Ended),
                            reason: Text(ThisRecord.Reason.Value),
                            total: Value(ThisRecord.Total_Downtime),
                            comments: Text(ThisRecord.Comments)
                        }
                    )
                );

                Select(t_update);
              Text: ="collect"
              Visible: =false
              X: =20
              Y: =20
        - t_update:
            Control: Classic/Button
            Properties:
              OnSelect: |-
                =/*Init Default Filters*/
                Set(varLoading,{Visible: true, Value: 15, Text: "Initializing Default Filters"});
                UpdateContext({
                    
                    locDefaultProductionFilter:
                        Filter(collectProduction,
                            hour_ending <= locWeekEnd,
                            hour_starting >= locWeekStart/*,
                            If(
                                t_line.Selected.Value = "Average",
                                line = line,
                                t_line.Selected.Value = "All SSC",
                                line = "SSC" || line = "SSC2",
                                t_line.Selected.Value = "All XL",
                                line = "XL1" || line = "XL2" || line = "XL3" || line = "XL4" || line = "XL5",
                                t_line.Selected.Value = "All XLT",
                                line = "XLT" || line = "XLT2" || line = "XLT3",
                                line = t_line.Selected.Value
                            )*/
                        ),

                    locDefaultDowntimeFilter:
                        Filter(collectDowntime,
                            ended <= locWeekEnd,
                            started >= locWeekStart/*,
                            If(
                                t_line.Selected.Value = "Average",
                                line = line,
                                t_line.Selected.Value = "All SSC",
                                line = "SSC" || line = "SSC2",
                                t_line.Selected.Value = "All XL",
                                line = "XL1" || line = "XL2" || line = "XL3" || line = "XL4" || line = "XL5",
                                t_line.Selected.Value = "All XLT",
                                line = "XLT" || line = "XLT2" || line = "XLT3",
                                line = t_line.Selected.Value
                            )*/
                        )
                });

                /*Find available sizes for date range*/
                Set(varLoading,{Visible: true, Value: 20, Text: "Finding Available Product Sizes"});

                ClearCollect(
                    collectTempSizeGroup,
                    GroupBy(
                        Filter(
                            collectProduction,
                            hour_ending <= locWeekEnd,
                            hour_starting >= locWeekStart/*,
                            If(
                                t_line.Selected.Value = "Average",
                                line = line,
                                t_line.Selected.Value = "All SSC",
                                line = "SSC" || line = "SSC2",
                                t_line.Selected.Value = "All XL",
                                line = "XL1" || line = "XL2" || line = "XL3" || line = "XL4" || line = "XL5",
                                t_line.Selected.Value = "All XLT",
                                line = "XLT" || line = "XLT2" || line = "XLT3",
                                line = t_line.Selected.Value
                            )*/
                        ),
                        size,
                        line_group
                    )
                );

                Set(varLoading,{Visible: true, Value: 25, Text: "Initializing List of Available Lots"});
                /*Init Lot List collection*/
                Clear(collectSizeList);
                /*Create a size list from production*/
                ForAll(
                    collectTempSizeGroup,
                    Collect(
                        collectSizeList,
                        {
                            Size: size,
                            Line: line_group.line
                        }
                    )
                );
                /*Clear temp collections*/
                Set(varLoading,{Visible: true, Value: 30, Text: "Garbage Collection"});
                Clear(collectTempSizeGroup);

                /*Force update Now()*/
                Set(varNow, Now());

                Set(varLoading,{Visible: true, Value: 35, Text: "Combining Databases"});
                /*Combine databases to find runtime data*/
                Clear(collectCombinedData);
                /*Insert production data int combined data*/
                ClearCollect(collectCombinedData,
                    Filter(
                        collectProduction,
                        /*If the selected locWeekEnd is greater than the current DateTime, use the current datetime rather than locWeekEnd*/
                        And(
                            hour_starting >= locWeekStart,
                            If(locWeekEnd > varNow,
                                hour_ending <= varNow,
                                hour_ending <= locWeekEnd
                            )
                        )
                    )
                );
                /* 
                    for all lines,
                    insert downtime data that does not overlap production data
                */
                ForAll(
                    collectLineSchema,
                    {
                        Line: SCH_Line,
                        
                        Value:
                            ForAll(
                                Filter(
                                    collectDowntime,
                                    And(
                                        started >= locWeekStart,
                                        ended <= locWeekEnd
                                        
                                    ),
                                    line = SCH_Line
                                ),
                                With(
                                    {
                                        thisDowntime: ThisRecord,
                                        thisLine: SCH_Line
                                    },
                                    If(
                                        CountRows(
                                            Filter(
                                                collectProduction,
                                                And(
                                                    hour_starting >= locWeekStart,
                                                    hour_ending <= locWeekEnd
                                                ),
                                                line = SCH_Line,
                                                amount_built <> 0,
                                                (hour_starting <= thisDowntime.started && hour_ending > thisDowntime.started) || 
                                                (hour_starting < thisDowntime.ended && hour_ending >= thisDowntime.ended) ||
                                                (hour_starting >= thisDowntime.started && hour_ending <= thisDowntime.ended)
                                                )) = 0,
                                        Collect(collectCombinedData, thisDowntime)
                                    )
                                )
                            )
                    }
                );
                ForAll(collectLineSchema,
                    Collect(collectCombinedData,
                        {
                            Line: SCH_Line,

                            unreported_minutes:
                                DateDiff(
                                        Max(
                                            First(Sort(Filter(collectCombinedData, line = SCH_Line),hour_ending,SortOrder.Descending)).hour_ending,
                                            First(Sort(Filter(collectCombinedData, line = SCH_Line),ended,SortOrder.Descending)).ended
                                        ),
                                        locWeekEnd,
                                        TimeUnit.Minutes
                                )
                            }
                    )
                );

                /*Find size count per line for combined data*/
                Set(varLoading,{Visible: true, Value: 40, Text: "Calculating Size Counts"});
                UpdateContext({
                    sizes_per_line:
                        With(
                            {theseLines: ["XL1", "XL2", "XL3", "XL4", "XL5", "SSC", "SSC2", "XLT", "XLT2", "XLT3"]},
                            ForAll(theseLines,
                                With({thisLine:ThisRecord.Value},
                                    {
                                        Line: thisLine,
                                        
                                        Value:
                                            CountRows(
                                                Distinct(
                                                    Filter(collectCombinedData, line = thisLine, Not(size = "00")),
                                                    size
                                                )
                                            )
                                    }
                                )
                            )
                        )
                });


                /*For each line, for each catalog, collect output, constraint, and runtime*/
                Set(varLoading,{Visible: true, Value: 45, Text: "Gathering OEE2 Data"});
                Clear(collectOEE2Data);
                With(
                    {
                        theseLines: ["XL1", "XL2", "XL3", "XL4", "XL5", "SSC", "SSC2", "XLT", "XLT2", "XLT3"],
                            /*If(
                                t_line.Selected.Value = "Average",
                                ["XL1", "XL2", "XL3", "XL4", "XL5", "SSC", "SSC2", "XLT", "XLT2", "XLT3"],
                                t_line.Selected.Value = "All SSC",
                                ["SSC", "SSC2"],
                                t_line.Selected.Value = "All XL",
                                ["XL1", "XL2", "XL3", "XL4", "XL5"],
                                t_line.Selected.Value = "All XLT",
                                ["XLT", "XLT2", "XLT3"],
                                [t_line.Selected.Value]
                            ),*/
                        theseCatalogs: ["51", "02", "03", "04", "05", "10", "015", "003", "006", "1F", "1H", "1S", "1T", "1Z", "2F", "2H", "2S", "2T", "2Z", "3F", "3H", "3S", "3T", "3Z"]
                            /*If(
                                t_line.Selected.Value = "Average",
                                ["51", "02", "03", "04", "05", "10", "015", "003", "006", "1F", "1H", "1S", "1T", "1Z", "2F", "2H", "2S", "2T", "2Z", "3F", "3H", "3S", "3T", "3Z"],
                                t_line.Selected.Value = "All SSC",
                                [ "015", "003", "006"],
                                t_line.Selected.Value = "All XL",
                                ["51", "02", "03", "04", "05", "10"],
                                t_line.Selected.Value = "All XLT",
                                ["1F", "1H", "1S", "1T", "1Z", "2F", "2H", "2S", "2T", "2Z", "3F", "3H", "3S", "3T", "3Z"],
                                ["51", "02", "03", "04", "05", "10", "015", "003", "006", "1F", "1H", "1S", "1T", "1Z", "2F", "2H", "2S", "2T", "2Z", "3F", "3H", "3S", "3T", "3Z"]
                            )*/
                    },
                    ForAll(theseLines,
                        With({thisLine: ThisRecord.Value},
                            ForAll(theseCatalogs,
                                With({thisCatalog: ThisRecord.Value},
                                    If(
                                        Sum(
                                            Filter(collectProduction,
                                                hour_starting >= locWeekStart,
                                                hour_ending <= locWeekEnd,
                                                line = thisLine,
                                                size = thisCatalog
                                            ),
                                            amount_built
                                        ) > 0,
                                    
                                        Collect(collectOEE2Data,
                                            {                                   
                                                line: thisLine,

                                                catalog: thisCatalog,
                                                
                                                output:
                                                    Sum(
                                                        Filter(collectProduction,
                                                            And(
                                                                hour_starting >= locWeekStart,
                                                                hour_ending <= locWeekEnd
                                                            ),
                                                            line = thisLine,
                                                            size = thisCatalog
                                                        ),
                                                        amount_built
                                                    ),
                                        
                                                constraint_goal:
                                                    /*Constraint *  Runtime*/
                                                    /*Constraint*/
                                                    IfError(
                                                        First(Filter(Goal_Settings, Line.Value = thisLine, Size.Value = thisCatalog)).Constraint_Setting,
                                                        0
                                                    ) *
                                                    /* Runtime */
                                                    (
                                                        /*Collect runtime minutes from production*/
                                                        (CountRows(
                                                            Filter(collectCombinedData,
                                                                amount_built > 0,
                                                                line = thisLine,
                                                                size = thisCatalog
                                                            )
                                                        ) * 60) +
                                                        /*Collect runtime minutes from downtime*/
                                                        Sum(
                                                            Filter(collectCombinedData,
                                                                line = thisLine,
                                                                size = thisCatalog,
                                                                Not(reason = "Planned Downtime" || reason = "No Scheduled Work" || reason = "Engineering DT")
                                                            ),
                                                            total
                                                        )
                                                        
                                                    ) / 60,

                                                missing_goal:
                                                    /*Average Constraint *  Missing Runtime*/
                                                    /*Average Constraint*/
                                                    IfError(
                                                        Average(Filter(Goal_Settings, Line.Value = thisLine),Constraint_Setting),
                                                        0
                                                    ) *
                                                    /* Missing Runtime */
                                                    (
                                                        /*Total Unreported Minutes per Line / Count of sizes per line*/
                                                        (Sum(Filter(collectCombinedData, Line = thisLine),unreported_minutes) / Sum(Filter(sizes_per_line, Line = thisLine),Value))
                                                        
                                                    ) / 60,
                                                
                                                missing_attainment:
                                                    /*Average Constraint *  Missing Runtime*/
                                                    /*Average Constraint*/
                                                    IfError(
                                                        Average(Filter(Goal_Settings, Line.Value = thisLine),Constraint_Setting),
                                                        0
                                                    ) *
                                                    /* Missing Runtime */
                                                    (
                                                        /*Total Unreported Minutes per Line / Count of sizes per line * Target OEE2 %*/
                                                        (
                                                            Sum(Filter(collectCombinedData, Line = thisLine),unreported_minutes) /
                                                            Sum(Filter(sizes_per_line, Line = thisLine),Value)) *
                                                            Switch(thisLine,
                                                                "SSC", 0.55,
                                                                "SSC2", 0.55,
                                                                "XLT", 0.61,
                                                                "XLT2", 0.61,
                                                                "XLT3", 0.61,
                                                                /*Default*/
                                                                0.59
                                                            )
                                                        
                                                    ) / 60
                                            }
                                        )
                                    )
                                )
                            )
                        )   
                    )
                );

                /*Collect OEE2 for each line*/
                Set(varLoading,{Visible: true, Value: 50, Text: "Calculating OEE2"});
                Clear(collectTrends);
                With(
                    {
                        theseLines:
                            ["Average", "All SSC", "All XL", "All XLT", "XL1", "XL2", "XL3", "XL4", "XL5", "SSC", "SSC2", "XLT", "XLT2", "XLT3"]
                    },
                    ForAll(theseLines,
                        With({thisLine: ThisRecord.Value},
                                Collect(collectTrends,
                                    {
                                        
                                        Line: thisLine,

                                        New_OEE2:
                                            IfError(
                                                Round(
                                                    (
                                                        (
                                                            Sum(
                                                                Filter(collectOEE2Data,
                                                                    If(
                                                                        thisLine = "Average",
                                                                        true,
                                                                        thisLine = "All SSC",
                                                                        line = "SSC" || line = "SSC2",
                                                                        thisLine = "All XL",
                                                                        line = "XL1" || line = "XL2" || line = "XL3" || line = "XL4" || line = "XL5",
                                                                        thisLine = "All XLT",
                                                                        line = "XLT" || line = "XLT2" || line = "XLT3",
                                                                        line = thisLine
                                                                    )
                                                                ),
                                                                output
                                                            ) +
                                                            Sum(
                                                                Filter(collectOEE2Data,
                                                                    If(
                                                                        thisLine = "Average",
                                                                        true,
                                                                        thisLine = "All SSC",
                                                                        line = "SSC" || line = "SSC2",
                                                                        thisLine = "All XL",
                                                                        line = "XL1" || line = "XL2" || line = "XL3" || line = "XL4" || line = "XL5",
                                                                        thisLine = "All XLT",
                                                                        line = "XLT" || line = "XLT2" || line = "XLT3",
                                                                        line = thisLine
                                                                    )
                                                                ),
                                                                missing_attainment
                                                            )
                                                        ) /
                                                        (
                                                            Sum(
                                                                Filter(collectOEE2Data,
                                                                    If(
                                                                        thisLine = "Average",
                                                                        true,
                                                                        thisLine = "All SSC",
                                                                        line = "SSC" || line = "SSC2",
                                                                        thisLine = "All XL",
                                                                        line = "XL1" || line = "XL2" || line = "XL3" || line = "XL4" || line = "XL5",
                                                                        thisLine = "All XLT",
                                                                        line = "XLT" || line = "XLT2" || line = "XLT3",
                                                                        line = thisLine
                                                                    )
                                                                ),
                                                                constraint_goal
                                                            ) +
                                                            Sum(
                                                                Filter(collectOEE2Data,
                                                                    If(
                                                                        thisLine = "Average",
                                                                        true,
                                                                        thisLine = "All SSC",
                                                                        line = "SSC" || line = "SSC2",
                                                                        thisLine = "All XL",
                                                                        line = "XL1" || line = "XL2" || line = "XL3" || line = "XL4" || line = "XL5",
                                                                        thisLine = "All XLT",
                                                                        line = "XLT" || line = "XLT2" || line = "XLT3",
                                                                        line = thisLine
                                                                    )
                                                                ),
                                                                missing_goal
                                                            )
                                                        )
                                                    ),
                                                    2
                                                ) * 100,
                                                0
                                            )
                                    }
                                )
                        )
                    )
                );

                Set(varLoading,{Visible: true, Value: 75, Text: "Patching Week "&locWeek&" OEE2 into Database"});
                /*Patch data into OEE2 sharepoint list*/
                ForAll(collectTrends,
                    With({thisLine:ThisRecord.Line, thisOEE: ThisRecord.New_OEE2},
                        If(
                            IsBlankOrError(
                                LookUp(
                                    Target_Analysis,
                                    Week = locWeek &&
                                    Year = Year(locWeekEnd) &&
                                    Line.Value = thisLine &&
                                    Size.Value = "Average"
                                )
                            ),

                            Patch(
                                Target_Analysis,
                                Defaults(Target_Analysis),
                                {
                                    OEE2: thisOEE,
                                    Week: locWeek,
                                    Year: Year(locWeekEnd),
                                    Line: {Value: thisLine},
                                    Size: {Value: "Average"}
                                }
                            ),

                            Patch(
                                Target_Analysis,
                                LookUp(
                                    Target_Analysis,
                                    Week = locWeek &&
                                    Year = Year(locWeekEnd) &&
                                    Line.Value = thisLine &&
                                    Size.Value = "Average"
                                ),
                                {
                                    OEE2: thisOEE
                                }
                            )
                        )
                    )
                );

                /*Garbage Collecting*/
                Set(varLoading,{Visible: true, Value: 98, Text: "Garbage Collection"});

                //Clear(collectOEE2Data);
                //Clear(collectCombinedData);
                Clear(collectTrends);
                //UpdateContext({ 
                //    locDefaultProductionFilter: Blank(),
                //    locDefaultDowntimeFilter: Blank()
                //});

                Set(varLoading,{Visible: true, Value: 100, Text: "Finishing Up"});
                /*End*/
                Set(varLoading,{Visible: false, Value: -1, Text: "Not Loading"});
              Text: ="update"
              Visible: =false
              X: =20
              Y: =20
        - t_logo:
            Control: Image
            Properties:
              Image: =LOGO_MSIG_SBlue_FIT_ALPHA
              FillPortions: =1
              LayoutMinHeight: =1
              LayoutMinWidth: =1
              Width: =10
        - t_h_title:
            Control: Label
            Properties:
              Text: ="Encapsualtion Daily Managmenet System"
              Align: =Align.Center
              Color: =varColor5
              FillPortions: =6
              LayoutMinHeight: =1
              LayoutMinWidth: =1
              Size: =Self.Height / 2
        - t_h_nav:
            Control: GroupContainer
            Variant: horizontalAutoLayoutContainer
            Properties:
              AlignInContainer: =AlignInContainer.SetByContainer
              DropShadow: =DropShadow.None
              LayoutAlignItems: =LayoutAlignItems.Stretch
              LayoutGap: =varPadding
              LayoutJustifyContent: =LayoutJustifyContent.Center
              LayoutMinHeight: =1
              LayoutMinWidth: =10
              LayoutMode: =LayoutMode.Auto
              RadiusBottomLeft: =0
              RadiusBottomRight: =0
              RadiusTopLeft: =0
              RadiusTopRight: =0
              Width: =t_h_n_reload.Width * 3 + varPadding * 4
            Children:
            - t_h_n_reload:
                Control: Image
                Properties:
                  OnSelect: =Select(t_collect);
                  Image: =gblAppIcons.Reload
                  Height: =Parent.Height * 0.75
                  HoverBorderColor: =ColorFade(varColorYes, 20%)
                  HoverFill: =ColorFade(varColorAccent, 75%)
                  LayoutMinHeight: =1
                  LayoutMinWidth: =10
                  RadiusBottomLeft: =Self.Width/2
                  RadiusBottomRight: =Self.Width/2
                  RadiusTopLeft: =Self.Width/2
                  RadiusTopRight: =Self.Width/2
                  Width: =Self.Height
                  X: =t_h_n_settings.X - Self.Width - Parent.Width * 0.015
                  Y: =Parent.Height/2 - Self.Height/2
            - t_h_n_bugs:
                Control: Image
                Properties:
                  OnSelect: =Navigate(Bugs)
                  Image: =gblAppIcons.Bug
                  Height: =Parent.Height * 0.75
                  HoverBorderColor: =ColorFade(varColorYes, 20%)
                  HoverFill: =ColorFade(varColorAccent, 75%)
                  LayoutMinHeight: =1
                  LayoutMinWidth: =10
                  RadiusBottomLeft: =Self.Width/2
                  RadiusBottomRight: =Self.Width/2
                  RadiusTopLeft: =Self.Width/2
                  RadiusTopRight: =Self.Width/2
                  Width: =Self.Height
                  X: =Parent.Width * 0.99 - Self.Width
                  Y: =Parent.Height/2 - Self.Height/2
            - t_h_n_settings:
                Control: Image
                Properties:
                  OnSelect: =Navigate(Settings)
                  Image: =gblAppIcons.Settings
                  Height: =Parent.Height * 0.75
                  HoverBorderColor: =ColorFade(varColorYes, 20%)
                  HoverFill: =ColorFade(varColorAccent, 75%)
                  LayoutMinHeight: =1
                  LayoutMinWidth: =10
                  RadiusBottomLeft: =Self.Width/2
                  RadiusBottomRight: =Self.Width/2
                  RadiusTopLeft: =Self.Width/2
                  RadiusTopRight: =Self.Width/2
                  Width: =Self.Height
                  X: =Parent.Width * 0.99 - Self.Width - t_h_n_bugs.Width - Parent.Width * 0.015
                  Y: =Parent.Height/2 - Self.Height/2
            - t_h_n_user:
                Control: Image
                Properties:
                  Image: |
                    =If(IsBlankOrError(User().Image), gblAppIcons.Employee, User().Image)
                  LayoutMinHeight: =1
                  LayoutMinWidth: =1
                  RadiusBottomLeft: =Self.Height / 2
                  RadiusBottomRight: =Self.Height / 2
                  RadiusTopLeft: =Self.Height / 2
                  RadiusTopRight: =Self.Height / 2
                  Width: =Self.Height
    - t_body:
        Control: GroupContainer
        Variant: horizontalAutoLayoutContainer
        Properties:
          AlignInContainer: =AlignInContainer.SetByContainer
          DropShadow: =DropShadow.None
          FillPortions: =15
          LayoutAlignItems: =LayoutAlignItems.Stretch
          LayoutMinHeight: =10
          LayoutMinWidth: =10
          LayoutMode: =LayoutMode.Auto
          RadiusBottomLeft: =0
          RadiusBottomRight: =0
          RadiusTopLeft: =0
          RadiusTopRight: =0
        Children:
        - t_nav:
            Control: GroupContainer
            Variant: horizontalAutoLayoutContainer
            Properties:
              AlignInContainer: =AlignInContainer.SetByContainer
              DropShadow: =DropShadow.None
              Fill: =varColor3
              LayoutAlignItems: =LayoutAlignItems.Stretch
              LayoutDirection: =LayoutDirection.Vertical
              LayoutGap: =varPadding
              LayoutMinHeight: =10
              LayoutMinWidth: =10
              LayoutMode: =LayoutMode.Auto
              PaddingBottom: =varPadding
              PaddingLeft: =varPadding
              PaddingRight: =varPadding
              PaddingTop: =varPadding
              RadiusBottomLeft: =0
              RadiusBottomRight: =0
              RadiusTopLeft: =0
              RadiusTopRight: =0
            Children:
            - t_n_title:
                Control: Text
                Properties:
                  Align: ='TextCanvas.Align'.Center
                  Size: =Self.Height / 3
                  Text: ="Trend Analysis"
                  VerticalAlign: ='TextCanvas.VerticalAlign'.Middle
                  Weight: ='TextCanvas.Weight'.Semibold
                  FillPortions: =1
            - t_n_seperator:
                Control: Rectangle
                Properties:
                  Height: =1
                  Width: =Parent.Width * 0.95
            - t_n_gallery:
                Control: Gallery
                Variant: galleryVertical
                Properties:
                  Items: =collectNavigation
                  DelayItemLoading: =true
                  FillPortions: =13
                  Layout: =Layout.Vertical
                  LayoutMinHeight: =1
                  LayoutMinWidth: =1
                  LoadingSpinner: =LoadingSpinner.Data
                  ShowScrollbar: =false
                  TemplatePadding: =0
                  TemplateSize: =(Self.Height - ((Self.AllItemsCount+1) * Self.TemplatePadding)) / Self.AllItemsCount
                Children:
                - t_n_button:
                    Control: Classic/Button
                    Properties:
                      OnSelect: =Navigate(ThisItem.ScreenName);
                      Text: =ThisItem.Title
                      Color: =varColor0
                      DisplayMode: =If(App.ActiveScreen = ThisItem.ScreenName, DisplayMode.Disabled, DisplayMode.Edit)
                      Fill: =varColorAccent
                      FontWeight: =FontWeight.Normal
                      Height: =Parent.TemplateHeight - varPadding
                      Size: =Self.Width / 16
                      Width: =Parent.TemplateWidth - Self.BorderThickness
                      X: =Center(Parent.TemplateWidth, Self.Width)
                      Y: =Center(Parent.TemplateHeight, Self.Height)
            - t_n_footer:
                Control: GroupContainer
                Variant: manualLayoutContainer
                Properties:
                  AlignInContainer: =AlignInContainer.SetByContainer
                  DropShadow: =DropShadow.None
                  FillPortions: =2
                  LayoutMinHeight: =1
                  LayoutMinWidth: =1
                  RadiusBottomLeft: =0
                  RadiusBottomRight: =0
                  RadiusTopLeft: =0
                  RadiusTopRight: =0
                Children:
                - t_n_f_text:
                    Control: Text
                    Properties:
                      Align: ='TextCanvas.Align'.Center
                      Size: =8
                      Text: ="MilliporeSigma is the U.S. and Canada Life Science business of Merck KGaA, Darmstadt, Germany."
                      VerticalAlign: ='TextCanvas.VerticalAlign'.Bottom
                      Height: =Parent.Height
                      Width: =Parent.Width
        - t_main:
            Control: GroupContainer
            Variant: horizontalAutoLayoutContainer
            Properties:
              AlignInContainer: =AlignInContainer.SetByContainer
              DropShadow: =DropShadow.None
              FillPortions: =11
              LayoutAlignItems: =LayoutAlignItems.Stretch
              LayoutGap: =varPadding
              LayoutMinHeight: =10
              LayoutMinWidth: =10
              LayoutMode: =LayoutMode.Auto
              PaddingBottom: =varPadding
              PaddingLeft: =varPadding
              PaddingRight: =varPadding
              PaddingTop: =varPadding
              RadiusBottomLeft: =0
              RadiusBottomRight: =0
              RadiusTopLeft: =0
              RadiusTopRight: =0
            Children:
            - t_controls:
                Control: GroupContainer
                Variant: horizontalAutoLayoutContainer
                Properties:
                  AlignInContainer: =AlignInContainer.SetByContainer
                  Fill: =varColor4
                  LayoutAlignItems: =LayoutAlignItems.Stretch
                  LayoutDirection: =LayoutDirection.Vertical
                  LayoutGap: =varPadding
                  LayoutMinHeight: =10
                  LayoutMinWidth: =10
                  LayoutMode: =LayoutMode.Auto
                  PaddingBottom: =varPadding
                  PaddingLeft: =varPadding
                  PaddingRight: =varPadding
                  PaddingTop: =varPadding
                Children:
                - t_start_date_title:
                    Control: Text
                    Properties:
                      Align: ='TextCanvas.Align'.Center
                      Size: =Self.Height / 3
                      Text: ="Target Date"
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - t_start_date:
                    Control: DatePicker
                    Properties:
                      OnChange: |-
                        =UpdateContext({ locWeek: WeekNum(t_start_date.SelectedDate) });
                      FontSize: =Self.Width / 10
                      Format: ="Short"
                      SelectedDate: =varNowDay
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - t_seperator_0:
                    Control: Rectangle
                    Properties:
                      Height: =1
                      LayoutMinWidth: =10
                - t_button:
                    Control: Classic/Button
                    Properties:
                      OnSelect: =Select(t_collect);
                      Text: ="Update Week " & locWeek & " Data"
                      Color: =varColor0
                      Fill: =varColorAccent
                      FillPortions: =1
                      FontWeight: =FontWeight.Normal
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                      Size: =Self.Width / 16
                - t_seperator_1:
                    Control: Rectangle
                    Properties:
                      Height: =1
                      LayoutMinWidth: =10
                - t_line_title:
                    Control: Text
                    Properties:
                      Align: ='TextCanvas.Align'.Center
                      Size: =Self.Height / 3
                      Text: ="Line"
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - t_line:
                    Control: DropDown
                    Variant: pcfdataset
                    Properties:
                      Appearance: ='DropdownCanvas.Appearance'.FilledDarker
                      DefaultSelectedItems: |-
                        ={Value: "Average"}
                      FontSize: =Self.Width / 10
                      Items: =["Average", "All SSC", "All XL", "All XLT", "SSC", "SSC2", "XL1", "XL2", "XL3", "XL4", "XL5", "XLT", "XLT2", "XLT3"]
                      FillPortions: =1
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                - t_c_footer:
                    Control: GroupContainer
                    Variant: manualLayoutContainer
                    Properties:
                      AlignInContainer: =AlignInContainer.SetByContainer
                      DropShadow: =DropShadow.None
                      FillPortions: =11
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                      RadiusBottomLeft: =0
                      RadiusBottomRight: =0
                      RadiusTopLeft: =0
                      RadiusTopRight: =0
            - t_section:
                Control: GroupContainer
                Variant: verticalAutoLayoutContainer
                Properties:
                  AlignInContainer: =AlignInContainer.SetByContainer
                  DropShadow: =DropShadow.None
                  FillPortions: =9
                  LayoutAlignItems: =LayoutAlignItems.Center
                  LayoutDirection: =LayoutDirection.Vertical
                  LayoutGap: =varPadding
                  LayoutJustifyContent: =LayoutJustifyContent.Center
                  LayoutMinHeight: =10
                  LayoutMinWidth: =10
                  LayoutMode: =LayoutMode.Auto
                  LayoutOverflowY: =LayoutOverflow.Scroll
                  PaddingBottom: =varPadding
                  PaddingLeft: =varPadding
                  PaddingRight: =varPadding
                  PaddingTop: =varPadding
                  RadiusBottomLeft: =0
                  RadiusBottomRight: =0
                  RadiusTopLeft: =0
                  RadiusTopRight: =0
                Children:
                - t_graph:
                    Control: Image
                    Properties:
                      Image: |-
                        ="https://quickchart.io/chart?width=" & Self.Width & "&height=" & Self.Height*0.90 & "&c=" & 
                        EncodeUrl("

                        {
                            type: 'line',
                            data: {
                                labels:"& Concatenate( "[", Concat(Sort(Filter(Target_Analysis, OEE2 >= 0, Week >= 17, Line.Value = t_line.Selected.Value),Week,SortOrder.Ascending), Week, "," ), "]") &",
                                datasets: [
                                    {
                                        label: '"&t_line.Selected.Value&"',
                                        backgroundColor: '#FFC832',
                                        borderColor: '#503291',
                                        data: "& Concatenate( "[", Concat(Sort(Filter(Target_Analysis, OEE2 >= 0, Week >= 17, Line.Value = t_line.Selected.Value),Week,SortOrder.Ascending), OEE2, "," ), "]") &",
                                        fill: false
                                    }
                                ]
                            },
                            options: {
                                scales: {
                                    yAxes: [{
                                        id: 'y-axis-0',
                                        type: 'linear',
                                        position: 'right',
                                        ticks: {
                                            beginAtZero: true,
                                            min: "& First(Sort(Filter(Target_Analysis, OEE2 >= 0, Week >= 17, Line.Value = t_line.Selected.Value),OEE2,SortOrder.Ascending)).OEE2 - 5 &",
                                            max: "& Last(Sort(Filter(Target_Analysis, OEE2 >= 0, Week >= 17, Line.Value = t_line.Selected.Value),OEE2,SortOrder.Ascending)).OEE2 + 5 &",
                                            stepSize: 5
                                        }
                                    }]
                                },
                                plugins: {
                                    datalabels: {
                                        color: '#000000',
                                        font: {size: 16},
                                        anchor: 'end',
                                        align: 'top',
                                        formatter: function(value, context) {
                                            return value + '%'; // Customize label text
                                        }
                                    }
                                },
                                annotation: {
                                    annotations: [{
                                        type: 'line',
                                        mode: 'horizontal',
                                        scaleID: 'y-axis-0',
                                        value: "&
                                            
                                            Switch(t_line.Selected.Value,
                                                "All SSC", 55,
                                                "SSC", 55,
                                                "SSC2", 55,
                                                "All XLT", 61,
                                                "XLT", 61,
                                                "XLT2", 61,
                                                59
                                            ) 
                                        
                                            &",
                                        borderColor: 'red',
                                        borderWidth: 2,
                                        borderDash: [5,5],
                                        label: {
                                            enabled: true,
                                            position: 'left',
                                            content: '"&

                                                Switch(t_line.Selected.Value,
                                                    "All SSC", "55% Target",
                                                    "SSC", "55% Target",
                                                    "SSC2", "55% Target",
                                                    "All XLT", "61% Target",
                                                    "XLT", "61% Target",
                                                    "XLT2", "61% Target",
                                                    "59% Target"
                                                )
                                                
                                                &"'
                                        }
                                    }]
                                }
                            }
                        }

                        ")
                      FillPortions: =1
                      Height: =286
                      LayoutMinHeight: =10
                      LayoutMinWidth: =10
                      Width: =Parent.Width * 0.95
                      X: =364
                      Y: =480
                - t_notice:
                    Control: Text
                    Properties:
                      Align: ='TextCanvas.Align'.Center
                      AutoHeight: =true
                      BorderColor: =RGBA(255, 255, 0, 1)
                      BorderRadiusBottomLeft: =8
                      BorderRadiusBottomRight: =8
                      BorderRadiusTopLeft: =8
                      BorderRadiusTopRight: =8
                      BorderStyle: =BorderStyle.Solid
                      BorderThickness: =1
                      PaddingBottom: =5
                      PaddingTop: =5
                      Text: ="Please note that the current Average OEE2 Trend data only applies to the validated XL Lines constraint data. SSC and XLT need updated constraint data before being added to the average. Thank you!"
                      Height: =65
                      LayoutMinHeight: =10
                      Visible: =false
                      Width: =Parent.Width * 0.95
